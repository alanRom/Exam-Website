
login.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>Login Page</title>
		<link rel="stylesheet" type="text/css" href="css/login.css">
		<script type="text/javascript" src="js/login.js"></script>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
	</head>
	<body>
		<div id="login-page">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<h1 class="header"></h1>
			<form id="login-form" method="POST" onsubmit="onSubmit(event)">
			<div class="main-section">
				<div class="blurred"></div>
				<div class="content">
  				<input type="text" placeholder="UCID" id="ID" name="ID" onchange="onTextChange(event)"></input>
  				<p id="ID-error"></p>


  				<input type="password" placeholder="Password" name="Password" id="Password" onchange="onTextChange(event)"></input>
  				<p id="Password-error"></p>
  				<button type="submit">Submit</button>
        </div>
			</div>
			</form>

			<div id="about-section">
				<h3>About the Developers</h3>
				<div>Alan Romano<br />
					<div class="little-label">Front-end</div><br  />
					Chris Etler<br />
					<div class="little-label">Middle-end</div><br  />
					Steven Youssef<br />
					<div class="little-label">Back-end</div><br  />
				</div>
			</div>
			<div id="about-indicator" onmouseenter="showSection()" onmouseleave="hideSection()"></div>
		</div>
	</body>
</html>

./html/add-question.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>Add a New Question</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/add-question.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/add-question.js"></script>

	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<div id="logout" onclick="logout()">Logout</div>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>

			<div id="column-view">
				<div class="select-group">
					<label > Filter By <select id="select-difficulty" onchange="onDifficultySelect(event)"></select>
					 <select id="select-type" onchange="onTypeSelect(event)"></select></label>
				</div>
				<div id="question-bank-view">
					<h3>Question Bank</h3>
					<div id="question-list"></div>
				</div>

				<form name="add-question-form" onsubmit="onSubmit(event)">
					Write a method named <input type="text" placeholder="Method Name" name="MethodName" onchange="removeValidation(event)"/>
					that uses
					<select name="Type" id="problem-type" onchange="removeValidation(event)">
						<option value="" selected>Problem Type</option>
					</select> and returns a
					<select name="ReturnType" id="return-type" onchange="removeValidation(event)">
						<option value="" selected>Function Return Type</option>
					</select>. The function takes in as parameters
					<div id="parameter-section">
					</div>
					and should do the following:
					<textarea type="text" placeholder="Question" name="QuestionString" onchange="removeValidation(event)"></textarea>
					<select name="Difficulty" id="difficulty-type" onchange="removeValidation(event)">
						<option value="" selected>Question Difficulty</option>
					</select>
					<button type="submit">Submit</button>
				</form>
			</div>
		</div>
  </body>
</html>

./html/add-test-case.html
---
<!DOCTYPE HTML>
<html>

<head>
	<title>Add a Test Case</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../css/add-test-case.css">
	<script type="text/javascript" src="../js/shared.js"></script>
	<script type="text/javascript" src="../js/add-test-case.js"></script>

</head>

<body>
	<div id="navbar">
		<div id="logo" onclick="goHome()">&#x270e;</div>
		<div id="logout" onclick="logout()">Logout</div>
	</div>
	<div id="container">
		<div id="message-view" class="closed" onclick="closeMessage()"></div>
		<div class="select-group">
			<label > Filter By <select id="select-difficulty" onchange="onDifficultySelect(event)"></select>
			<select id="select-type" onchange="onTypeSelect(event)"></select></label>
		</div>
		<div id="question-bank-view">
			<h3 class="titles" id="bank-header"></h3>
			<div id="question-list"></div>
		</div>
		<div class="center">
			<form>
				<h3 id="question-header"></h3>
				<div id="parameter-section">
				</div>
				<textarea id="Output" name="Output" placeholder="Output"></textarea>
				<button type="submit" onclick="onSubmit(event)">Add the test case</button>
			</form>
			<div id="test-case-section">
				<h3>Test Cases</h3>
			</div>
		</div>
	</div>
</body>

</html>

./html/exam-info.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>Exam Information</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/exam-info.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/exam-info.js"></script>
	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<a id="logout" onclick="logout()">Logout</a>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<div id="sidebar">
				<h3>Available Exams</h3>
			</div>
			<div id="other-half">
				<h1 id="exam-name"></h1>
					<div id="release-view"></div>
					<div id="questions-view"></div>
			</div>

    </div>
  </body>
</html>

./html/grade-results.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>View Grade Results</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/grade-results.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/grade-results.js"></script>
	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<a id="logout" onclick="logout()">Logout</a>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<div id="sidebar">
				<h3>Available Grades</h3>
			</div>
			<div id="other-half">
				<div id="exam-container">
				</div>
			</div>
		</div>
  </body>
</html>

./html/landing-page.html
---
<!DOCTYPE HTML>
<html>

<head>
	<title>Dashboard</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../css/landing-page.css">
	<script type="text/javascript" src="../js/shared.js"></script>
	<script type="text/javascript" src="../js/landing-page.js"></script>

</head>

<body>
	<div id="navbar">
		<div id="logo" onclick="goHome()">&#x270e;</div>
		<a id="logout" onclick="logout()">Logout</a>
	</div>
	<div id="container">
		<div id="message-view" class="closed" onclick="closeMessage()"></div>
		<h2 id="greeting"></h2>
	</div>
</body>

</html>

./html/select-questions.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>Make an Exam</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/select-questions.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/select-questions.js"></script>
	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<a id="logout" onclick="logout()">Logout</a>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<div class="select-group">
				<label > Filter By <select id="select-difficulty" onchange="onDifficultySelect(event)"></select>
						<select id="select-type" onchange="onTypeSelect(event)"></select></label>
			</div>
			<div id="row-view">
				<div id="question-bank-view">
					<h3 class="titles">Question Bank</h3>
				</div>
				<div id="questions-selected-view">
					<h3 class="titles">Question Pool</h3>
				</div>
			</div>
			<br />
			<div class="section">
				<input type="text" id="exam-name" placeholder="Exam Name" onchange="removeValidation(event)"/>
				<div id="max-grade">Maximum Grade: </div>
				<div id="submit-button" onclick="onSubmit()">Make the Exam</div>
			</div>

		</div>
  </body>
</html>

./html/take-exam.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>Take an Exam</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/take-exam.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/take-exam.js"></script>
	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<a id="logout" onclick="logout()">Logout</a>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<div id="sidebar">
				<h3>Available Exams</h3>
			</div>
			<div id="other-half">
			</div>
		</div>
  </body>
</html>

./html/view-grades.html
---
<!DOCTYPE HTML>
<html>
	<head>
		<title>View Your Results</title>
   	<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../css/grade-results.css">
		<script type="text/javascript" src="../js/shared.js"></script>
		<script type="text/javascript" src="../js/view-grades.js"></script>
	</head>
	<body>
		<div id="navbar">
			<div id="logo" onclick="goHome()">&#x270e;</div>
			<a id="logout" onclick="logout()">Logout</a>
		</div>
		<div id="container">
			<div id="message-view" class="closed" onclick="closeMessage()"></div>
			<div id="sidebar">
				<h3>Available Grades</h3>
			</div>
			<div id="other-half">
				<div id="exam-view">
					<div id="main-grade"></div>
					<div id="questions-view"></div>
				</div>
			</div>
		</div>
  </body>
</html>



./css/add-question.css
---
@import "layout.css";

.question{
  padding:10px;
  width:100%;
  font-size: 16px;
}

.select-group{
  color:white;
  font-size: 16px;
  margin: 10px auto;
  margin-bottom: 0px;
}

#column-view{
  display:flex;
  width:100%;
  min-height:100%;
  overflow-y: visible;
  flex-direction: column;
}

#parameter-section{
  display:inline;
}

form, #question-bank-view{
  color:white;
  width: 100%;
  text-align: justify;;
  height: 315px;
  background-color: #17181E;
  border-radius: 2px;
  padding: 0 20px;
  margin: 5px auto;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
}

form{
  width: 70%;
}
#question-bank-view{
  width:70%;
  overflow-y: auto;
}

#add-param-button{
  border-radius: 50%;
  text-align: center;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  width:24px;
  color:#B1A9A9;
  font-size: 22px;
  font-weight: lighter;
  cursor: pointer;
  background-color: white;
  margin:0 auto;
}
.param-button{
  position:fixed;
  text-align: center;
  padding-bottom: 5px;
  margin-left: 45%;
}
.button-text{

}
select{
  text-align-last:center;
}
select:disabled{
  cursor: not-allowed;
}

input, textarea,select {
  font-family: Arial;
  margin: 6px auto;
  text-align: center;
  border-radius: 2px;
  color:white;
  font-size: 16px;
  padding:5px;
  border:0px solid rgb(220,220,220);
  background-color: #2c303a;
}

input, select{
  display: inline;
  min-width: 80px;
  width:fit-content;
}

textarea{
  display:block;
  width: 80%;
}

input:focus,textarea:focus{
  -moz-box-shadow: 0 0 8px #88D5E9;
    -webkit-box-shadow: 0 0 8px #88D5E9;
    box-shadow: 0 0 8px #88D5E9;
    border: 1px solid #88D5E9;
}

textarea{
  height: 100px;
}

button:hover{
  background-color: #4d94ff;
}
button{
  border-radius:25px;
  display:block;
	margin: 8px auto;
  width:100px;
  text-decoration: none;
	font-size: 16px;
	border:none;
	background-color: #1a75ff;
 	color:white;
	padding: 10px 15px;
  box-shadow: 0 0 20px 2px rgba(0,0,0,0.3);
}

./css/add-test-case.css
---
@import "layout.css";

form, #question-bank-view, #test-case-section{
  color:white;
  text-align: center;
  background-color: #17181E;
  border-radius: 2px;
  padding: 10px 20px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);

}
#test-case-section{
  position: relative;
  text-align: center;
  width: 200px;
  margin: 0 10px;
  overflow: auto;
  height: 300px;
}

.center, #question-bank-view{
  margin: 20px auto;
}
.center{
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
}
form{
  width: 40vw;
  min-height: 300px;
  max-height: 50%;
  margin-right: 10px;
  align-self: center;
  position: relative;
}

#question-bank-view{
  width:70%;
  height:300px;
  overflow-y: auto;
  padding-bottom: 0px;
}

input,textarea{
  display: block;
  width:80%;
  font-family: Arial;
  margin: 6px auto;
  text-align: center;
  border-radius: 2px;
  color: white;
  font-size: 16px;
  padding:5px;
  border:0px solid rgb(220,220,220);
  background-color: #17181E;
}

input::placeholder, textarea::placeholder{
  color:white;
}

textarea{
  height: 100px;
}

button{
  border-radius:25px;
  display:block;
	margin: 8px auto;
  width:180px;
  text-decoration: none;
	font-size: 16px;
	border:none;
	background-color: #1a75ff;
 	color:white;
	padding: 10px 15px;
  transition: background-color 0.3s ease-in 0s;
}

.question{
  cursor: pointer;
}

.titles{
  padding: 10px;
  padding-bottom: 0px;
  margin: 0px;
}

.question:hover{
  background-color: #373a48;
}
.disabled{
  cursor: not-allowed;
}
.select-group{
  color:white;
  font-size: 16px;
  margin: 10px auto;
  margin-bottom: 0px;
  display: inline;
}

select{
  text-align-last:center;
  display: inline;
  min-width: 80px;
  width:fit-content;
  font-family: Arial;
  margin: 0 auto;
  text-align: center;
  border-radius: 2px;
  color:white;
  font-size: 16px;
  padding:5px;
  border:0px solid rgb(220,220,220);
  background-color: #2c303a;
}

./css/exam-info.css
---
@import "layout.css";

.question ul{
  text-decoration: none;
}

#exam-name{
  margin: 10px auto;
}

#other-half{
  padding: 5px;
  text-align: center;
  color: white;
}

.question-block
{
  height: fit-content;
  width: calc(100% - 20px)
  border:none;
  border-bottom: 1px dashed #C9CBCF;
  text-align: center;
  padding: 5px;
  margin:5px;
}

.question-property{
  width: 100%;
  margin: 4px auto;
  text-decoration: none;
  font-style: italic;
}
#questions-view{
  width: 70%;
  margin: 20px auto;
  background-color: rgba(0,0,0,0.7);
  border-radius: 2px;
  padding: 10px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  color:white;
}
#questions-view:empty{
    display: none;
}

./css/grade-results.css
---
@import "layout.css";

#exam-name{
    margin: 4px auto;
    width: fit-content;
    color: white;
    font-size:
}

.test-case-input{
  display:inline-block;
  width: 80px;
}

label{
    color: white;
    position: relative;
}
#select-student{
    font-family: Arial;
    margin: 4px auto;
    text-align-last:center;
    border-radius: 2px;
    color: white;
    font-size: 22px;
    padding:5px;
    border:0px solid rgb(220,220,220);
    background-color: #2c303a;
    text-align: center;
    width: 200px;
    display: inline-block;
}

#release-view{
    margin: 10px auto;
    color:white;
    width: fit-content;
}
#release-check{
  margin-left: 10px;
}
#main-grade{
  width:fit-content;
  text-align: center;
  font-size: 10em;
  margin: 10px auto;
  background-color: rgba(0,0,0,0.7);
  border-radius: 2px;
  padding: 10px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  color:white;

}
#questions-view{
  width: 80%;
  margin: 20px auto;
  background-color: rgba(0,0,0,0.7);
  border-radius: 2px;
  padding: 10px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  color:white;
}

.question-block{
  height: fit-content;
  border:none;
  border-bottom: 1px dashed #C9CBCF;
  text-align: center;
  padding: 5px;
  margin:5px;
}

.question-string {
    margin: 8px 0;
}
.question-user-input {
    background-color: rgba(255,255,255, 0.1);
    font-family: monospace;
    line-height: 1.5;
    margin: 10px 0;
    padding: 10px 20px;
    text-align: left;
    width: calc(100% - 60px);
}
.question-header {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
}

.show-result{
    cursor: pointer;
    text-decoration: underline;
    color: blue;
}

.compile-result{
  background-color: rgba(255,255,255,0.2);
  border-radius: 2px;
  width: calc(100% - 60px);
  margin: 10px 0;
  overflow: auto;
  height: 0;
}

.compile-result, .question-user-input{
  white-space: pre;
 }
.hidden {
    height: 0;
    transition: height 0.5s ease-in-out, padding 0.3s ease-in-out;
    will-change:height;
    overflow: hidden;
}
.show {
    height: 200px;
    padding: 20px;

}
.center{
  display: block;
  margin: 0 auto;
  width: fit-content;
}
#save-button{
  display: inline-block;
  height: 30px;
  background-color: #FF4C1D;
  text-align: center;
  color: white;
  cursor: pointer;
  font-size: x-large;
  padding: 8px;
  border-radius: 2px;
  margin-left: 20px;
}

.show-button{
  background-color: #2E8EFA !important;
}

.show-button:hover{
  background-color: #51a0fb !important;
}

.test-case-header{
  font-style: italic;
  font-size: 18px;
}
#questions-view:empty,#main-grade:empty, #select-student:empty, label:empty{
    display: none;
}

input{
  font-family: Arial;
  margin: 6px auto;
  text-align: center;
  border-radius: 2px;
  color:white;
  font-size: 24px;
  font-weight: bold;
  padding:2px;
  border:0;
  background-color: #2c303a;
  display: inline;
  width: fit-content;
}

td, th{
    border-bottom: 1px dashed white;
    padding: 10px;
}

tr:nth-child(even){
    background-color: #21232b;
}
tr:hover{
    background-color: #373a48;
}
thead{
    border-bottom: 1px solid white;
}
thead:hover{
}

table{
    border-collapse: collapse;
    width: 80%;
    margin: auto;
}
.color-pass{
    background-color: green;
}

.color-fail{
    background-color: red;
}

./css/landing-page.css
---
@import "layout.css";

#greeting{
  margin: 40px auto;
  font-size: 48px;
  color:white;
  text-align: center;
}

./css/layout.css
---
html, body {
    width: 100%;
    height: 100%;
    position: relative;
    margin: 0px;
    font-family: Helvetica, Arial, sans-serif;
}

body {
    background-size: cover;
    background-color: #4e5265;
    background-attachment: fixed;
}

#loading-screen {
    position: fixed;
    background-color: inherit;
    width: inherit;
    height: inherit;
    z-index: 1;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    will-change: opacity;
}

#loading-screen.finish-load {
    opacity: 1;
}

#loading-icon {
    margin: 0 auto;
    width: 100px;
    z-index: 4;
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

#message-view {
    text-align: center;
    z-index: 3;
    width: 100%;
    margin: 0px auto;
    font-size: 16px;
    padding: 8px 0;
    height: fit-content;
    position: fixed;
    background-color: #333333;
    border-radius: 2px;
    box-shadow: 0 0 25px 4px rgba(0, 0, 0, 0.3);
    color: white;
    will-change: transform;
    transition: transform 0.5s ease-in-out;
    cursor: pointer;
}

.closed {
    transform: translateY(-35px);
}

#container {
    width: 100%;
    margin-top: 40px;
    position: absolute;
    display: flex;
    flex-direction: column;
}

#navbar {
    display: inline-flex;
    top: 0;
    z-index: 4;
    position: fixed;
    height: 40px;
    width: 100%;
    flex-direction: row;
    margin: 0px;
    border: 0px;
    background-color: black;
    box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.5);
}

#logo:hover {
    transform: scale(1.7);
}

#logo {
    padding: 0 20px;
    font-size: 30px;
    text-align: center;
    color: white;
    cursor: pointer;
    background: url('../static/beta.svg');
    transition: transform 0.3s ease-in-out;
    will-change: transform;
}

#instructor-view, #student-view {
    display: flex;
    height: 100%;
}

#navbar a, #logout {
    text-decoration: none;
    color: white;
    text-align: center;
    font-size: 16px;
    flex-wrap: nowrap;
    height: calc(100% - 20px);
    z-index: 15;
    width: fit-content;
    padding: 10px 15px;
    background-color: black;
    transition: color 0.3s ease-in-out, background-color 0.3s ease-in-out;
    will-change: color, background-color;
}

#navbar a:hover {
    color: black;
    background-color: white;
    border-color: white;
}

#logout, #logout:hover {
    margin-left: auto;
    cursor: pointer;
}

.reject {
    border: 1px solid red;
}

#other-half{
  width: 100%;
  min-height: calc(100% - 70px);
  position: relative;
}

.sidebar-closed{
  transform: translateX(-190px);
}

.sidebar-closed:hover{
  transform: translateX(0);
}

#sidebar{
  z-index: 2 !important;
  background-color: #333333;
  text-align: center;
  color:white;
  width: 200px;
  left: 0;
  top: 0;
  margin-top: 40px;
  position: fixed;
  height: calc(100% - 40px);
  overflow-y: scroll;
  float: left;
  -ms-overflow-style: none;
  transition: transform 0.5s ease-in-out;
  will-change: transform;
  box-shadow: 0 0 10px 2px rgba(0,0,0,0.3);
}
#sidebar::-webkit-scrollbar {
  width: 0 !important;
}

.sidebar-element{
  color:white;
  height: 20px;
  width:200px;
  text-overflow: ellipsis;
  text-decoration: none;
  cursor: pointer;
  margin: 0;
  padding: 8px 2px;
}
.sidebar-element:hover{
  background-color: white;
  color: black;
}

@media screen and (max-width: 600px){
  #navbar {
      height: 50px;
  }
  #container {
      margin-top: 50px;
  }
  .sidebar-closed{
    transform: translateX(-100%);
  }
  #sidebar{
    width: 100%;
  }

  .sidebar-closed:hover{
    transform: translateX(-100%);
  }

}

.question{
  padding:10px;
  width:100%;
  font-size: 16px;
}

./css/login.css
---
@import "layout.css";

body{
  overflow: hidden;
}

#login-page {
  background: url("../static/backgroundlite.jpg") no-repeat center center fixed;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  width:100%;
	height: 100%;
	margin: 0 auto;
  overflow: hidden;
}
#login-page{


}


#about-indicator{
  background: rgba(0,0,0,0.6);
  font-size: 30px;
  width:40px;
  height: 40px;
  border-radius: 20px;
  position: absolute;
  bottom: 50px;
  right: 50px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  text-align: center;
  color: #4d4c4d;
  z-index: 5;
}

#about-indicator:hover{

}


#about-section{
  opacity: 0;
  color:white;
  position: absolute;
  bottom: 80px;
  right: 10px;
  z-index: 4;
  background-color: rgba(0,0,0,0.8);
  padding: 10px 20px;
  height:fit-content;
  width: fit-content;
  text-align: center;
  font-size: 18px;
  transform: translateY(100px);
  border-radius: 3px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
  will-change: transform;
}

#about-section.reveal{
  opacity: 1;
  transform: translateY(0px);
}
#about-section .little-label{
    font-size: 12px;
    font-variant: small-caps;
    text-align: center;
    color: #949293;
}

.blurred{
	z-index: 1;
 background-color:rgba(0,0,0,0.45);
  position:absolute;
	top: 0px;
  right: 0px;
  bottom: 0px;
  left: 0px;
	/*filter:blur(1px);
   -webkit-filter: blur(1px);
  */
}

.content {
	z-index: 1;
	position: relative;
}

.header{
	font-family: Helmet,Freesans,Helvetica,Arial,sans-serif;
	font-style:normal;
	font-weight: lighter;
	margin: 30px auto;
	padding: 5px 0px;
	width:100%;
	height: 20%;
	color: white;
	text-align: center;
	border-radius: 0px;
}

.main-section{
	font-family: Helvetica, sans-serif;
	position: relative;
	text-align: center;
	align-items: center;
	letter-spacing:0px;
	font-weight: 600;
	font-size: 30px;
	width: fit-content;
	margin: 10px auto;
  	display: table;
	padding:30px;
	color:white;
	transition: box-shadow 0.5s ease-in-out 0s;
}


.result-box{
	margin: 20px auto;
}


#ID-error,#Password-error{
	font-size: 0.9rem;
	margin:0px;
	padding: 2px;
	color: white;
}

h1{
	font-size: 8em;
}
label{
	padding: 10px;

	}

input{
	border: 1px solid lightgrey;
	width: 200px;
	height: 25px;
	margin: 5px auto;
	display: block;
	text-align: center;
	align-self: center;
  font-size:16px;
	/*transition: border-color 0.5s ease-in 0s, box-shadow 0.5s ease-in-out 0s;
	*/
}

.err-input{
	border: 1px solid red;

}

button{
	display:block;
	margin: 8px auto;
  text-decoration: none;
	font-size: 16px;
	border:none;
	background-color: #1a75ff;
 	color:white;
	padding: 10px 15px;
  transition: background-color 0.3s ease-in 0s;
}
  button:hover{
  background-color:#4d94ff;
  transition: background-color 0.3s ease-out 0s;
}

./css/select-questions.css
---
@import "layout.css";

#row-view{
    display: flex;
    width:100%;
    flex-direction: row;
}

.titles{
  margin: 10px auto;
  text-align: center;
}

.question{
  padding:10px 15px;
  width: calc(100% - 60px);
  cursor: pointer;
}

.question-in-pool{
  padding:10px 15px;
  padding-right: 0;
  width:calc(90% - 15px);
  display:inline-block;
  font-size: 16px;
  cursor: pointer;
}
.question:hover{
  background-color: rgba(0,0,0,0.2);
}

#question-bank-view,#questions-selected-view{
  overflow-y: auto;
  overflow-x: hidden;
  max-height: 100%;
  margin: 10px;
  color:white;
  background-color: #17181E;
  border-radius: 2px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  width: calc(50vw - 40px);
  height: 65vh;
}


.select-group{
  color:white;
  font-size: 16px;
  margin: 10px 30px;
  margin-bottom: 0px;
  display: inline;
}


.section{
  width: 300px;
  height: 92px;
  display: block;
  margin: 0 auto;
  background-color: rgba(0,0,0,0.7);
  border-radius: 2px;
  padding: 10px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
}

.reject{
  border: 1px solid red;
}

#exam-name,#max-grade{
  display: block;
  margin: 8px auto;
  padding:5px;
  text-align: center;
  color:white;
}

.wrapper{
  display: inline-block;
  width:100%;
}
.small-input{
  display: inline;
  width: 8%;
  text-align: center;
}

#submit-button:hover{
  background-color: #4d94ff;
}
#submit-button{
  cursor: pointer;
  border-radius:25px;
  margin:0 auto;
  display:block;
  height:20px;
  width:fit-content;
  text-decoration: none;
	font-size: 16px;
	border:none;
	background-color: #1a75ff;
 	color:white;
	padding: 10px 15px;
  box-shadow: 0 0 20px 2px rgba(0,0,0,0.3);
}

input{
  background-color: #21242C;
  border:none;
  font-size: 16px;
  color:white;
}

select{
  text-align-last:center;
  display: inline;
  min-width: 80px;
  width:fit-content;
  font-family: Arial;
  margin: 0 auto;
  text-align: center;
  border-radius: 2px;
  color:white;
  font-size: 16px;
  padding:5px;
  border:0px solid rgb(220,220,220);
  background-color: #2c303a;
}

./css/take-exam.css
---
@import "layout.css";


#question-view{
  display: flex;
  z-index: 0;
  flex-direction: column;
  line-height: 1.2em;
  font-size: 16px;
  position: relative;
  width: 75%;
  height:60vh;
  margin: 10px auto;
  background-color: #17181E;
  border-radius: 2px;
  padding: 10px;
  box-shadow: 0 0 25px 4px rgba(0,0,0,0.3);
  color: white;
}

#question-text{
  width:calc(100% - 10px);
  padding:5px;
  margin:0 auto;
  text-align: justify;
  color: white;
  overflow-y: auto;
}

#question-answer{
  background-color: #21242C;
  font-family: "Lucida Console", Monaco, monospace;
  border:none;
  padding:5px;
  flex: 2 1 10%;
  width:calc(100% - 10px);
  min-height: 200px;
  font-size: 16px;
  color:white;
  overflow-y: auto;
}

#button-section{
  margin:0 auto;
  width:70%;
}
#next,#previous{
  float: right;
  margin:0 8px;
  cursor: pointer;
  border-radius:25px;
  display:inline-block;
  height:40px;
  width:90px;
  text-decoration: none;
	font-size: 16px;
	border:none;
	background-color: #1a75ff;
 	color:white;
	padding: 10px 15px;
  transition: background-color 0.3s ease-in 0s;
}

.disabled{
  cursor:not-allowed !important;
}

@keyframes fadeAppear {
  from {opacity: 0;}
  to {opacity: 1;}
}

#modal{
  background-color: rgba(0,0,0,0.6);
  display: block;
  z-index: 3;
  top: 0;
  left: 0;
  position: fixed;
  width: 100%;
  height:100%;
}

#modal-content{
  position: relative;
  width: 30%;
  color: white;
  margin: 20% auto;
  z-index: 4;
  background-color: #282A2C;
  overflow: visible;
  border-radius: 3px;
  animation-name: fadeAppear;
  animation-duration: 0.5s;
}
#modal-footer{
  padding: 7px 5px;
  border-radius: 0 0 3px 3px;
  background-color: #474A4D;

}
#modal-text{
  padding: 15px;
  padding-bottom: 5px;
  text-align: center;
}

#confirm-button,#cancel-button{
  text-align: center;
  margin:0 5px;
  bottom: 0;
  cursor: pointer;
  border-radius:25px;
  display:inline-block;
  height:20px;
  width:55px;
  text-decoration: none;
  font-size: 16px;
  border:none;
  	color:white;
  padding: 10px 15px;
}
#confirm-button{
  background-color: #0150C5;
}
#cancel-button{
  background-color: #400692;
}

#button-group{
  margin: 0 auto;
  width: 195px;
}

@media screen and (min-width: 1200px){
  #question-view{
      width: 1150px;
      margin: 10px auto;
  }
  #button-section{
    width: 1150px;
  }
}

./css/view-grades.css
---
@import "layout.css";
#exam-view {}

#main-grade {
    width: fit-content;
    text-align: center;
    font-size: 10em;
    margin: 10px auto;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 2px;
    padding: 10px;
    box-shadow: 0 0 25px 4px rgba(0, 0, 0, 0.3);
    color: white;
}

#questions-view {
    width: 80%;
    margin: 20px auto;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 2px;
    padding: 10px;
    box-shadow: 0 0 25px 4px rgba(0, 0, 0, 0.3);
    color: white;
}

.question-block {
    height: fit-content;
    border: none;
    border-bottom: 1px dashed #C9CBCF;
    text-align: center;
    line-height: 1.2;
    padding: 5px;
    margin: 5px;
}

.question-string {
    margin: 8px 0;
}
.question-user-input {
    background-color: rgba(255,255,255, 0.1);
    font-family: monospace;
    line-height: 1.5;
    margin: 10px 0;
    text-align: left;
}
.question-header {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
}

.show-result, .show-table {
    cursor: pointer;
    text-decoration: underline;
    color: blue;
}

.compile-result {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    margin: 10px 0;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-in-out;
    will-change: max-height;
}


.hidden {
    max-height: 0;
    transition: all 0.5s ease-in-out;
    will-change:max-height;
    overflow: hidden;
}
.show {
    max-height: 600px;
    padding: 10px;

}
.compile-result, .question-user-input{
  white-space: pre;
 }


.test-case-header {
    font-style: italic;
    font-size: 18px;
}



#questions-view:empty, #main-grade:empty {
    display: none;
}

.table-header{
  background-color: #333333;
  border:1px solid white;
}
.left-align{
  width: 200px;
  text-align: left;
}
.feedback{
  padding: 10px 0;
}

td, th {
    border-bottom: 1px dashed white;
    padding: 10px;
}

tr:nth-child(even) {
    background-color: #21232b;
}

tr:hover {
    background-color: #373a48;
}

thead {
    border-bottom: 1px solid white;
}

thead:hover {}

table {
    border-collapse: collapse;
    width: 80%;
    margin: 20px auto;
    height: 100%;
}



.color-pass {
    background-color: green;
}

.color-fail {
    background-color: red;
}


./php/apiCall.php
---
<?php
    header('content-type: application/json; charset=utf-8');
    header("access-control-allow-origin: *");
    $url = "http://afsaccess1.njit.edu/~cme9/";
    $url = $url . $_POST['Dir'];

    unset($_POST['Dir']);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $_POST);
    $middle_output = curl_exec($ch);
    curl_close($ch);
    //
    echo $middle_output;
?>

./php/login.php
---
<?php
    header('content-type: application/json; charset=utf-8');
    header("access-control-allow-origin: *");
    session_start();
    $url="http://afsaccess1.njit.edu/~cme9/loginMiddle.php";
    $post = ['ID' => $_POST["ID"],
              'Password' => $_POST["Password"]];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);

    $backend_output = curl_exec($ch);
    curl_close($ch);
    $parsed_output = json_decode($backend_output);
    if($parsed_output->BackendSuccess == true ){
      $_SESSION['UCID'] = $parsed_output->ucid;
      $_SESSION['Instructor'] = $parsed_output->type != 's'; //whether user is student or instructor
    }


    echo $backend_output;
?>

./php/logout.php
---
<?php
  header('content-type: application/json; charset=utf-8');
  header("access-control-allow-origin: *");
  session_start();
  $_SESSION = array();

  session_destroy();
?>

./php/session.php
---
<?php
    header('content-type: application/json; charset=utf-8');
    header("access-control-allow-origin: *");
    session_start();
    echo json_encode($_SESSION);
 ?>


 ./js/add-question.js
 ---
 accessAllowed('i', sessionStorage.Instructor);

 let typeSelected = 'Type';
 let difficultySelected = 'All';
 const questionsSelected = [];
 const returnTypes = ['int', 'String', 'float', 'double', 'boolean', 'char', 'void'];
 const problemTypes = ['None', 'For', 'While', 'Recursion', 'Overload'];
 const difficultyOptions = [
     {
         val: 1,
         label: 'Easy',
     }, {
         val: 2,
         label: 'Medium',
     }, {
         val: 3,
         label: 'Hard',
     },
 ];

 const QUESTION_INSERT_DIV = 'question-list';
 const QUESTION_BANK_DIV = 'question-bank-view';
 const PARAMETER_INSERT_DIV = 'parameter-section';

 const makeProblemOptions = () => {
     let divString = '';
     problemTypes.forEach((problem) => {
         divString += `<option value=${problem}>${problem}</option>`;
     });
     return divString;
 };

 const makeReturnOptions = () => {
     let divString = '';
     returnTypes.forEach((type) => {
         divString += `<option value=${type}>${type}</option>`;
     });
     return divString;
 };

 const addParameter = () => {
     const parameterSection = document.getElementById(PARAMETER_INSERT_DIV);
     for (let paramCount = 1; paramCount <= 4; paramCount += 1) {
         const insertDiv = `
           <select name="Param${paramCount}_Type" id="param${paramCount}_Type"
             onchange="unlockParameters('${paramCount}');" ${paramCount !== 1 ? 'disabled' : ''}>
             <option value="" selected>Parameter${paramCount} Type</option>
               ${makeReturnOptions()}
         </select>,`;

         parameterSection.insertAdjacentHTML('beforeend', insertDiv);
     }
 };

 const validation = () => {
     const requiredFields = ['MethodName', 'Difficulty', 'Type', 'ReturnType', 'QuestionString'];
     let accepted = true;
     requiredFields.forEach((field) => {
         const div = document.getElementsByName(field)[0];
         if (div.value === '') {
             div.classList.add('reject');
             accepted = false;
         } else {
             div.classList.remove('reject');
         }
     });
     return accepted;
 };

 const clearFields = () => {
     const fields = [
         'MethodName',
         'Difficulty',
         'Type',
         'ReturnType',
         'Param1_Type',
         'Param2_Type',
         'Param3_Type',
         'Param4_Type',
         'QuestionString',
     ];
     fields.forEach((field) => {
         document.getElementsByName(field)[0].value = '';
     });
 };

 const clearQuestionsBank = () => {
     const deleteList = document.getElementById(QUESTION_INSERT_DIV).children;
     for (let i = deleteList.length - 1; i >= 0; i -= 1) {
         deleteList[i].parentNode.removeChild(deleteList[i]);
     }
 };


 const addQuestionsToView = (questions) => {
     const questionBank = document.getElementById(QUESTION_INSERT_DIV);
     clearQuestionsBank();

     questions.forEach((question) => {
         const newDiv = document.createElement('div');
         newDiv.innerText = question.QuestionString;
         newDiv.className = 'question';
         questionBank.appendChild(newDiv);
     });

     doneLoading();
 };

 const addSelectOptions = () => {
     const problemDropdown = document.getElementById('problem-type');
     const returnDropdown = document.getElementById('return-type');

     const problemOptions = makeProblemOptions();
     const returnOptions = makeReturnOptions();

     problemDropdown.insertAdjacentHTML('beforeend', problemOptions);
     returnDropdown.insertAdjacentHTML('beforeend', returnOptions);
 };
 const unlockParameters = (index) => {
     if (index === '4') { return; }
     document.getElementById(`param${parseInt(index, 10) + 1}_Type`).disabled = false; // unlock next parameter
 };

 const makeDifficultyOptions = () => {
     const difficultyDropdown = document.getElementById('difficulty-type');
     let divString = '';
     difficultyOptions.forEach((type) => {
         divString += `<option value=${type.val}>${type.label}</option>`;
     });
     difficultyDropdown.insertAdjacentHTML('beforeend', divString);
 };

 const onSelect = () => {
     const difficulty = difficultySelected === 'All'
         ? ''
         : `${difficultySelected}`;
     const type = typeSelected === 'Type'
         ? ''
         : `${typeSelected}`;
     const postString = `Difficulty=${difficulty}&Type=${type}`;

     showLoading(document.getElementById(QUESTION_BANK_DIV));

     apiCall('getQuestions.php', postString).then(JSON.parse).then((questions) => {
         if (questions.Questions === null) {
             if (difficultySelected === 'All' && typeSelected !== 'Type') {
                 showMessage(`Sorry, there are no ${typeSelected} questions.`);
             } else if (difficultySelected !== 'All' && typeSelected === 'Type') {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10) - 1].label} questions.`);
             } else {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10) - 1].label} ${typeSelected} questions.`);
             }
             doneLoading();
             return;
         }

         closeMessage();
         addQuestionsToView(questions.Questions);
     });
 };

 const onDifficultySelect = (event) => {
     difficultySelected = event.target.value;
     onSelect();
 };

 const onTypeSelect = (event) => {
     typeSelected = event.target.value;
     onSelect();
 };


 const startup = (session) => {
     showLoading(document.getElementById(QUESTION_BANK_DIV));
     makeDifficultyOptions();
     addParameter();
     addSelectOptions();
     makeTypeFilterOptions();
     makeDifficultyFilterOptions();

     apiCall('getQuestions.php').then(JSON.parse).then((questions) => {
         addQuestionsToView(questions.Questions);
     });
 };

 const onSubmit = (e) => {
     e.preventDefault();

     const fields = [
         'MethodName',
         'Difficulty',
         'Type',
         'ReturnType',
         'Param1_Type',
         'Param2_Type',
         'Param3_Type',
         'Param4_Type',
     ];

     if (!validation()) {
         showMessage('Sorry, but not all the fields were filled out');
         return;
     }
     closeMessage();


     const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];

     const returnVal = document.getElementsByName('ReturnType')[0].value;
     const returnString = vowels.includes(returnVal.charAt(0))
         ? `an ${returnVal}`
         : `a ${returnVal}`;

     let params = [];
     params[0] = document.getElementsByName('Param1_Type')[0].value;
     params[1] = document.getElementsByName('Param2_Type')[0].value;
     params[2] = document.getElementsByName('Param3_Type')[0].value;
     params[3] = document.getElementsByName('Param4_Type')[0].value;

     params = params.filter(param => param !== '');

     let paramString = '';
     if (params.length > 1) {
         paramString = 'as parameters ';
     } else {
         paramString = 'as a parameter ';
     }

     if (params.length === 1) {
         paramString += vowels.includes(params[0].charAt(0))
             ? `an ${params[0]}`
             : `a ${params[0]}`;
     } else if (params.length === 2) {
         const param1 = vowels.includes(params[0].charAt(0))
             ? `an ${params[0]}`
             : `a ${params[0]}`;
         const param2 = vowels.includes(params[1].charAt(0))
             ? `an ${params[1]}`
             : `a ${params[1]}`;
         paramString += `${param1} and ${param2}`;
     } else if (params.length > 2) {
         params.forEach((param, index) => {
             if (index === params.length - 1) {
                 const lastParam = vowels.includes(param.charAt(0))
                     ? `an ${param}`
                     : `a ${param}`;
                 paramString += `and ${lastParam}`;
             } else {
                 paramString += vowels.includes(param.charAt(0))
                     ? `an ${param}, `
                     : `a ${param}, `;
             }
         });
     }

     const problemType = document.getElementsByName('Type')[0].value === 'None'
         ? ''
         : `uses ${document.getElementsByName('Type')[0].value} and `;

     const questionString = `Write a method named ${document.getElementsByName('MethodName')[0].value} that ${problemType}returns ${returnString}. The function takes in ${paramString} and should do the following: ${document.getElementsByName('QuestionString')[0].value}`;

     let postString = fields.map(field => `${field}=${encodeURIComponent(document.getElementsByName(field)[0].value)}&`).reduce((acc, val) => acc + val, '&');
     postString += `QuestionString=${encodeURIComponent(questionString)}`;
     apiCall('addQuestion.php', postString).then(JSON.parse).then((res) => {
         if (res.success) {
             clearFields();
             showMessage('Your question was created successfully. You should add some test cases now.');
         } else {
             showMessage('Sorry, there was an problem creating the question. Try again later.');
         }
     });
 };

 ./js/add-test-case.js
 ---
 accessAllowed('i', sessionStorage.Instructor);

 let questionsLoaded = null;
 const questionSelectedText = '';
 let questionSelected = '';
 let difficultySelected = 'All';
 let typeSelected = 'Type';
 let ucid = null;
 const problemTypes = ['None', 'For', 'While', 'Recursion', 'Overload'];
 const difficultyOptions = [{ val: 1, label: 'Easy' }, { val: 2, label: 'Medium' }, { val: 3, label: 'Hard' }];
 const returnTypes = ['int', 'String', 'float', 'double', 'boolean'];

 const QUESTION_INSERT_DIV = 'question-list';
 const QUESTION_BANK_DIV = 'question-bank-view';

 const getQuestionIndex = (id) => {
     for (let i = questionsLoaded.length - 1; i >= 0; i -= 1) {
         if (questionsLoaded[i].id === id) {
             return i;
         }
     }
     return -1;
 };

 const changeHeader = () => {
     document.getElementById('question-header').innerText = `${questionsLoaded[getQuestionIndex(questionSelected)].QuestionString}`;
 };

 const getAvailableParams = (id) => {
     const question = questionsLoaded[getQuestionIndex(id)];

     const params = ['Param1_Type', 'Param2_Type', 'Param3_Type', 'Param4_Type'];

     return params.map((param, index) => {
         if (question[param] !== '') {
             return index + 1;
         }

         return undefined;
     }).filter(param => param !== undefined);
 };

 const validation = () => {
     let accept = true;

     if (questionSelected === '') {
         showMessage('Please choose a question');
         accept = false;
         return accept;
     }
     closeMessage();


     getAvailableParams(questionSelected).forEach((paramCount) => {
         const div = document.getElementsByName(`Param${paramCount}`)[0];
         if (div.value === '') {
             div.classList.add('reject');
             accept = false;
         } else {
             div.classList.remove('reject');
         }
     });
     return accept;
 };


 const clearTestCases = () => {
     const deletingList = document.getElementsByClassName('loaded-test-case');
     for (let j = deletingList.length - 1; j >= 0; j -= 1) {
         document.getElementById('test-case-section').removeChild(deletingList[j]);
     }
 };
 const getTestCases = () => {
     clearTestCases();
     closeMessage();
     showLoading(document.getElementById('test-case-section'));
     apiCall('getTestCases.php', `&QuestionID=${questionSelected}`).then(JSON.parse).then((result) => {
         const divString = result['Test Cases'].map((tc) => {
             let paramString = '';
             for (let i = 1; i <= 4; i += 1) {
                 if (i !== 1 && tc[`Param${i}`] !== '') {
                     paramString += ', ';
                 }

                 paramString += tc[`Param${i}`];
             }
             return `<div class="loaded-test-case">(${paramString}) => ${tc.Output}<br /></div>`;
         }).reduce((acc, val) => acc + val, '');

         clearTestCases();
         document.getElementById('test-case-section').insertAdjacentHTML('beforeend', divString);
         doneLoading();
     })
   .catch((err) => {
       doneLoading();
       showMessage('This problem has no test cases.');
   });
 };


 const clearForm = () => {
     const form = document.getElementsByTagName('form');
     if (form[0][2] === undefined) {
         return;
     }
     for (let i = 0; i < 5; i += 1) {
         form[0][i].value = '';
     }
 };


 const addParameter = (availableParams) => {
     const paramElem = document.getElementById('parameter-section');
     for (let paramCount = 1; paramCount <= 4; paramCount += 1) {
         let insertDiv = null;
         if (availableParams.includes(paramCount)) {
             insertDiv = `<input type="text" name="Param${paramCount}" placeholder="Param${paramCount}" id="param${paramCount}"></input>`;
         } else {
             insertDiv = `<input type="text" class="disabled" name="Param${paramCount}" placeholder="Param${paramCount}" id="param${paramCount}" disabled></input>`;
         }
         paramElem.insertAdjacentHTML('beforeend', insertDiv);
     }
 };

 const removeParameters = () => {
     const form = document.getElementsByTagName('form')[0];
     form.removeChild(document.getElementById('parameter-section'));
     document.getElementById('question-header').insertAdjacentHTML('afterend', '<div id="parameter-section"></div>');
 };

 const makeReturnOptions = () => {
     let divString = '';
     returnTypes.forEach((type) => {
         divString += `<option value=${type}>${type}</option>`;
     });
     return divString;
 };

 const addQuestionsToBank = () => {
     const questionBank = document.getElementById(QUESTION_INSERT_DIV);
     questionsLoaded.forEach((question) => {
         const questionText = question.QuestionString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
         const id = question.id;
         const newDiv = `<div class="question" id="${id}" data-q-id="${id}" onclick="chooseQuestion(this);">${questionText}</div>`;
         questionBank.insertAdjacentHTML('beforeend', newDiv);
     });
     doneLoading();
 };

 const clearQuestionsBank = () => {
     const deleteList = document.getElementById(QUESTION_INSERT_DIV).children;
     for (let i = deleteList.length - 1; i >= 0; i -= 1) {
         deleteList[i].parentNode.removeChild(deleteList[i]);
     }
 };

 const chooseQuestion = (elem) => {
     questionSelected = elem.dataset.qId;

     changeHeader();
     getTestCases();
     clearForm();
     removeParameters();
     addParameter(getAvailableParams(elem.dataset.qId));
 };

 const onSelect = () => {
     const difficulty = difficultySelected === 'All' ? '' : `${difficultySelected}`;
     const type = typeSelected === 'Type' ? '' : `${typeSelected}`;
     const postString = `Difficulty=${difficulty}&Type=${type}`;
     showLoading(document.getElementById(QUESTION_BANK_DIV));
     apiCall('getQuestions.php', postString).then(JSON.parse).then((questions) => {
         if (questions.Questions === null) {
             if (difficultySelected === 'All' && typeSelected !== 'Type') {
                 showMessage(`Sorry, there are no ${typeSelected} questions.`);
             } else if (difficultySelected !== 'All' && typeSelected === 'Type') {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10) - 1].label} questions.`);
             } else if (difficultySelected !== 'All' && typeSelected !== 'Type') {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10) - 1].label} ${typeSelected} questions.`);
             } else {
                 showMessage('Sorry, there are no questions :(');
             }
             doneLoading();
             return;
         }
         questionsLoaded = questions.Questions;
         closeMessage();
         clearQuestionsBank();
         addQuestionsToBank();
     });
 };

 const onDifficultySelect = (event) => {
     difficultySelected = event.target.value;
     onSelect();
 };

 const onTypeSelect = (event) => {
     typeSelected = event.target.value;
     onSelect();
 };


 const startup = (session) => {
     showLoading(document.getElementById(QUESTION_BANK_DIV));
     ucid = session.UCID;
     apiCall('getQuestions.php').then(JSON.parse).then((questions) => {
         document.getElementById('bank-header').innerText = 'Choose a Question';
         questionsLoaded = questions.Questions;

         addQuestionsToBank();
         makeTypeFilterOptions();
         makeDifficultyFilterOptions();
     });
 };

 const onSubmit = (e) => {
     e.preventDefault();

     const fields = ['Param1', 'Param2', 'Param3', 'Param4', 'Output'];

     if (!validation()) {
         return;
     }
     let paramString = '';
     for (let i = 0; i < 4; i += 1) {
         if (i !== 0 && document.getElementsByName(fields[i])[0].value !== '') {
             paramString += ', ';
         }

         paramString += document.getElementsByName(fields[i])[0].value;
     }

     const testCaseDiv = `<div class="loaded-test-case">(${paramString}) => ${document.getElementsByName(fields[4])[0].value}<br /></div>`;

     console.log(testCaseDiv);


     let postString = fields.map(field => `${field}=${encodeURIComponent(document.getElementsByName(field)[0].value)}&`).reduce((acc, val) => acc + val, '&');
     postString += `QuestionID=${questionSelected}`;
     apiCall('addTestCase.php', postString).then(JSON.parse).then((res) => {
         if (res.success) {
             showMessage('The test case was created successfully');
             document.getElementById('test-case-section').insertAdjacentHTML('beforeend', testCaseDiv);
         } else {
             showMessage('Sorry, something went wrong. Please try again later.');
         }
         window.scrollTo(0, 0);
     });
 };

 ./js/exam-info.js
 ---
 accessAllowed('i', sessionStorage.Instructor);

 let examID = null;
 let examName = '';
 let examsLoaded = null;
 let takable = null;
 let gradesReleased = null;

 const QUESTIONS_VIEW_DIV = 'questions-view';
 const EXAM_NAME_DIV = 'exam-name';
 const SIDEBAR_DIV = 'sidebar';
 const CONTAINER_DIV = 'other-half';

 const startup = (session) => {
     showLoading(document.getElementById(SIDEBAR_DIV));
     apiCall('getExams.php', `&UCID=${session.UCID}`).then(JSON.parse).then((result) => {
         console.log(result);
         if ((result.Exams === undefined || result.Exams === null
           || result.Exams.length === 0) && result.success) {
             showMessage('You haven\'t made any exams yet :(');
             doneLoading();

             return;
         }

         examsLoaded = result.Exams;
         const examsList = result.Exams.map(exam => `<div data-exam-id=${exam.id} onclick="linkClick(this)" class="sidebar-element">${exam.displayName}</div>`).reduce((acc, val) => acc + val, '');

         document.getElementById(SIDEBAR_DIV).insertAdjacentHTML('beforeend', examsList);
         doneLoading();
     });
 };


 const getExamIndex = (id) => {
     for (let i = examsLoaded.length - 1; i >= 0; i -= 1) {
         if (examsLoaded[i].id === id) {
             return i;
         }
     }
     return -1;
 };

 const clearExamView = () => {
     if (!document.getElementById(QUESTIONS_VIEW_DIV)) return;
     const parent = document.getElementById(QUESTIONS_VIEW_DIV).parentNode;
     parent.removeChild(document.getElementById(QUESTIONS_VIEW_DIV));
     parent.insertAdjacentHTML('beforeend', '<div id="questions-view"></div>');
 };

 const changeExam = () => {
     showLoading();
     document.getElementById(SIDEBAR_DIV).classList.add('sidebar-closed');
     document.getElementById(CONTAINER_DIV).classList.add('full-width');

     takable = examsLoaded[getExamIndex(examID)].releasedForTaking === '1';
     gradesReleased = examsLoaded[getExamIndex(examID)].gradesReleased === '1';
     apiCall('getExam.php', `&ExamID=${examID}`).then(JSON.parse).then((res) => {
         clearExamView();
         examName = examsLoaded[getExamIndex(examID)].displayName;

         const divString = res.Questions.map(question => `<div class="question-block"><div class="question-header">Question ${question.id}</div><div class="question-text">${question.QuestionString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div><div class="question-property">Difficulty: ${question.Difficulty}</div><div class="question-property">Value: ${question.QuestionValue}</div><div class="question-property">Question Type: ${question.Type}</div></div>`).reduce((acc, val) => acc + val, '');

         if (!document.getElementById('release-check')) {
             document.getElementById('release-view').insertAdjacentHTML('beforeend', '<label>Allow students to take this exam</label><input id="release-check" type="checkbox" onchange="releaseForTaking()"></input>');
         }
         document.getElementById('release-check').checked = takable;


         document.getElementById(EXAM_NAME_DIV).innerText = examName;

         document.getElementById(QUESTIONS_VIEW_DIV).insertAdjacentHTML('beforeend', divString);
         doneLoading();
     });
 };

 const linkClick = (elem) => {
     examID = elem.dataset.examId;
     changeExam();
 };

 const releaseForTaking = () => {
     closeMessage();
     takable = !takable;
     const postString = `&ExamID=${examID}&ReleasedForTaking=${takable ? '1' : '0'}&GradesReleased=${gradesReleased ? '1' : '0'}`;
     apiCall('setExam.php', postString).then((res) => {
         console.log('done');
         showMessage(`Students ${takable ? 'can' : 'cannot'} take this exam now.`);
     });
 };

 ./js/grade-results.js
 ---
 accessAllowed('i', sessionStorage.Instructor);

 let examID = null;
 let ucid = null;
 let examGrade = null;
 let maxGrade = null;
 let examName = '';
 let studentUCID = null;
 let currentExam = null;
 let examsLoaded = null;
 let takable = null;
 let gradesReleased = null;
 let testCaseChanges = [];
 let questionGradeChanges = [];

 const QUESTIONS_VIEW_DIV = 'questions-view';
 const EXAM_NAME_DIV = 'exam-name';
 const MAIN_GRADE_DIV = 'main-grade';
 const SIDEBAR_DIV = 'sidebar';
 const CONTAINER_DIV = 'other-half';
 const SAVE_BUTTON_DIV = 'save-button';

 const startup = (session) => {
     ucid = session.UCID;
     showLoading(document.getElementById(SIDEBAR_DIV));
     apiCall('getExams.php', `&UCID=${session.UCID}`).then(JSON.parse).then((result) => {
         if ((result.Exams === undefined || result.Exams === null
           || result.Exams.length === 0) && result.success) {
             showMessage('There are no grades yet :(');
             doneLoading();

             return;
         }

         examsLoaded = result.Exams;
         const examsList = result.Exams.map(exam => `<div data-exam-id=${exam.id} onclick="linkClick(this)" class="sidebar-element">${exam.displayName}</div>`).reduce((acc, val) => acc + val, '');

         document.getElementById(SIDEBAR_DIV).insertAdjacentHTML('beforeend', examsList);
         doneLoading();
     });
 };

 const getExamIndex = (id) => {
     for (let i = examsLoaded.length - 1; i >= 0; i -= 1) {
         if (examsLoaded[i].id === id) {
             return i;
         }
     }
     return -1;
 };


 const getGradeIndex = (id) => {
     for (let i = currentExam.length - 1; i >= 0; i -= 1) {
         if (currentExam[i].UCID === id) {
             return i;
         }
     }
     return -1;
 };

 const onChangeTestCaseGrade = (e) => {
     if (e.target.value < parseFloat(e.target.min)) {
         e.target.value = e.target.min;
     } else if (e.target.value > parseFloat(e.target.max)) {
         e.target.value = e.target.max;
     }

     let changeIndex = null;
     testCaseChanges.filter((change, index) => {
         if (change.ExamID === examID && change.QuestionID === e.target.dataset.questionId
           && change.TestCaseID === e.target.dataset.testCaseId && change.UCID === studentUCID) {
             changeIndex = index;
             return true;
         }
         return false;
     });

     if (testCaseChanges.length === 0) {
         testCaseChanges.push({
             ExamID: examID,
             QuestionID: e.target.dataset.questionId,
             TestCaseID: e.target.dataset.testCaseId,
             UCID: studentUCID,
             OriginalGrade: e.target.dataset.originalGrade,
             NewGrade: e.target.value,
         });
     } else if (changeIndex !== null) {
         testCaseChanges[changeIndex].NewGrade = e.target.value;
     } else {
         testCaseChanges.push({
             ExamID: examID,
             QuestionID: e.target.dataset.questionId,
             TestCaseID: e.target.dataset.testCaseId,
             UCID: studentUCID,
             OriginalGrade: e.target.dataset.originalGrade,
             NewGrade: e.target.value,
         });
     }

     document.getElementById(SAVE_BUTTON_DIV).classList.add('show-button');
 };

 const onChangePartialGrade = (e) => {
     console.log(e);
     if (e.target.value < parseFloat(e.target.min)) {
         e.target.value = e.target.min;
     } else if (e.target.value > parseFloat(e.target.max)) {
         e.target.value = e.target.max;
     }

     let changeIndex = null;
     questionGradeChanges.filter((change, index) => {
         if (change.ExamID === examID && change.QuestionID === e.target.dataset.questionId
           && change.ColumnName === e.target.dataset.columnName && change.UCID === studentUCID) {
             changeIndex = index;
             return true;
         }
         return false;
     });

     if (questionGradeChanges.length === 0) {
         questionGradeChanges.push({
             ExamID: examID,
             QuestionID: e.target.dataset.questionId,
             UCID: studentUCID,
             ColumnName: e.target.dataset.columnName,
             OriginalGrade: e.target.dataset.originalGrade,
             NewGrade: e.target.value,
         });
     } else if (changeIndex !== null) {
         questionGradeChanges[changeIndex].NewGrade = e.target.value;
     } else {
         questionGradeChanges.push({
             ExamID: examID,
             QuestionID: e.target.dataset.questionId,
             ColumnName: e.target.dataset.columnName,
             UCID: studentUCID,
             OriginalGrade: e.target.dataset.originalGrade,
             NewGrade: e.target.value,
         });
     }

     document.getElementById(SAVE_BUTTON_DIV).classList.add('show-button');
 };


 const clearQuestionsView = () => {
     // changing student in same exam
     const deletingNode = document.getElementById(QUESTIONS_VIEW_DIV);
     const parentNode = document.getElementById('exam-view');

     if (deletingNode) {
         parentNode.removeChild(deletingNode);
     }
     parentNode.insertAdjacentHTML('beforeend', '<div id="questions-view"></div>');
 };

 const makeQuestionDiv = (qu) => {
     const testCases = qu.TestCases.map(testCase => `<tr>
                 <td>${testCase.Input}</td><td>${testCase.ExpectedOutput}</td><td>${testCase.Result}</td><td class="${testCase.Passed === '1' ? 'color-pass' : 'color-fail'}">${testCase.Passed === '1' ? 'Yes' : 'No'}</td><td><input type="number" value="${parseFloat(testCase.TestCaseGrade).toFixed(2).replace('.00', '')}" data-question-id="${qu.QuestionID}" data-test-case-id="${testCase.TestCaseID}" data-original-grade="${testCase.TestCaseGrade}" onchange="onChangeTestCaseGrade(event);" min="0" max="${testCase['Max Test Case Grade'].toFixed(2).replace('.00', '')}" step=".01"/>/${testCase['Max Test Case Grade'].toFixed(2).replace('.00', '')}</td>
               </tr>`).reduce((acc, val) => acc + val, '');
     const compileResultsSection = qu.compilationMessage !== '' ?
   `<div class="show-result" onclick="showView('Q${qu.QuestionID}-Compile');">Compilation Results</div>
   <div class="hidden compile-result" id="Q${qu.QuestionID}-Compile"></div>` : '';
     const divString = `
           <div class="question-block">
             <div class="question-header">Question ${qu.NumberInExam} (${qu.Grade}/${qu['Max Value']} pts.)</div>
             <div class="question-string" id="Q${qu.QuestionID}-String"></div>
             <div class="show-result-header">${studentUCID}'s Answer</div>
             <div class="question-user-input" id="Q${qu.QuestionID}-UserInput"></div>
             ${compileResultsSection}
             <div class="feedback">${qu.userFeedback !== '' ? `Feedback: ${qu.userFeedback}` : ''}</div>
             <div id="Q${qu.QuestionID}TestCases">
                     <table>
                       <tr>
                         <td class="left-align">Correct Method Name</td><td></td><td></td><td class="${qu.correctMethodName === '1' ? 'color-pass' : 'color-fail'}">${qu.correctMethodName === '1' ? 'Yes' : 'No'}</td><td><input type="number" class="test-case-input" value="${parseFloat(qu.methodGrade).toFixed(2).replace('.00', '')}" data-question-id="${qu.QuestionID}" data-original-grade="${qu.methodGrade}" data-column-name="methodGrade" onchange="onChangePartialGrade(event);" min="0" max="${qu['Max Method Name Grade'].toFixed(2).replace('.00', '')}" step=".01"/>/${qu['Max Method Name Grade']}</td>
                       </tr>
                       <tr>
                         <td class="left-align">Compiled Correctly</td><td></td><td></td><td class="${qu.compiledCorrectly === '1' ? 'color-pass' : 'color-fail'}">${qu.compiledCorrectly === '1' ? 'Yes' : 'No'}</td><td><input type="number" class="test-case-input" value="${parseFloat(qu.compiledGrade).toFixed(2).replace('.00', '')}" data-question-id="${qu.QuestionID}" data-original-grade="${qu.compiledGrade}" data-column-name="compiledGrade" onchange="onChangePartialGrade(event);" min="0" max="${qu['Max Compiled Grade'].toFixed(2).replace('.00', '')}" step=".01"/>/${qu['Max Compiled Grade']}</td>
                       </tr>
                       <tr>
                         <td class="left-align">Correct Structure</td><td></td><td></td><td class="${qu.correctStructure === '1' ? 'color-pass' : 'color-fail'}">${qu.correctStructure === '1' ? 'Yes' : 'No'}</td><td><input type="number" class="test-case-input" value="${parseFloat(qu.structGrade).toFixed(2).replace('.00', '')}" data-question-id="${qu.QuestionID}" data-original-grade="${qu.structGrade}" data-column-name="structGrade" onchange="onChangePartialGrade(event);" min="0" max="${qu['Max Struct Grade'].toFixed(2).replace('.00', '')}" step=".01"/>/${qu['Max Struct Grade']}</td>
                       </tr>
                     <tr class="table-header">
                         <th>Input</th><th>Expected Output</th><th>Actual Output</th><th>Passed</th><th>Points</th>
                     </tr>
                     <tbody>
                         ${testCases}
                     </tbody>
                     </table>
             </div>
           </div>`;
     return divString;
 };

 const changeStudentGrades = () => {
     clearQuestionsView();
     examGrade = null;
     maxGrade = null;
     const gradesObj = currentExam[getGradeIndex(studentUCID)];
     examGrade = gradesObj.Grade.toFixed(2).replace('.00', '');
     maxGrade = gradesObj['Max Grade'];
     document.getElementById(MAIN_GRADE_DIV).innerText = `${examGrade}/${maxGrade}`;
     const questionsView = document.getElementById(QUESTIONS_VIEW_DIV);

     gradesObj.Questions.sort((a, b) => a.NumberInExam > b.NumberInExam).forEach((qu) => {
         const divString = makeQuestionDiv(qu);
         questionsView.insertAdjacentHTML('beforeend', divString);

         document.getElementById(`Q${qu.QuestionID}-String`).innerText = qu.QuestionString;
         document.getElementById(`Q${qu.QuestionID}-UserInput`).innerText = qu.UserInput.replace(/(?:\t)/g, '      ');
         if (qu.compilationMessage !== '') {
             document.getElementById(`Q${qu.QuestionID}-Compile`).innerText = qu.compilationMessage;
         }
     });
 };

 const calculateNewGrade = () => {
     let newTotalGrade = 0;
     const newgradesObj = currentExam[getGradeIndex(studentUCID)];
     newgradesObj.Questions = newgradesObj.Questions.map((qu) => {
         const newQuestion = qu;
         let totalTCGrade = 0;

         newQuestion.TestCases = qu.TestCases.map((tc) => {
             const newTC = tc;
             const changes = testCaseChanges.filter(grade => grade.ExamID === examID
               && grade.QuestionID === qu.QuestionID && grade.UCID === studentUCID
               && grade.TestCaseID === tc.TestCaseID);
             if (changes.length !== 0) {
                 const netTCGradeChange = (changes[0].NewGrade - changes[0].OriginalGrade);
                 newTC.TestCaseGrade = (parseFloat(tc.TestCaseGrade) + netTCGradeChange).toFixed(2).replace('.00', '');
             }
             totalTCGrade += parseFloat(newTC.TestCaseGrade);
             return newTC;
         });
         newQuestion.TestCasesGrade = totalTCGrade.toFixed(2).replace('.00', '');
         let newQuestionGrade = 0;
         const categories = ['compiledGrade', 'methodGrade', 'structGrade'];
         categories.forEach((col) => {
             const changes = questionGradeChanges
             .filter(grade => grade.ExamID === examID && grade.ColumnName === col
                && grade.QuestionID === qu.QuestionID && grade.UCID === studentUCID);
             if (changes.length !== 0) {
                 newQuestion[col] = (parseFloat(qu[col]) +
                  (changes[0].NewGrade - changes[0].OriginalGrade)).toFixed(2).replace('.00', '');
             }
             newQuestionGrade += parseFloat(newQuestion[col]);
         });
         newQuestionGrade += parseFloat(newQuestion.TestCasesGrade);
         newQuestion.Grade = newQuestionGrade.toFixed(2).replace('.00', '');
         newTotalGrade += parseFloat(newQuestion.Grade);
         return newQuestion;
     });
     newgradesObj.Grade = newTotalGrade;
     currentExam[getGradeIndex(studentUCID)] = newgradesObj;

     document.getElementById(MAIN_GRADE_DIV).innerText = `${newgradesObj.Grade.toFixed(2).replace('.00', '')}/${maxGrade}`;
     changeStudentGrades();
 };

 const onStudentSelect = (e) => {
     studentUCID = e.target.value;
     testCaseChanges = [];
     questionGradeChanges = [];
     document.getElementById(SAVE_BUTTON_DIV).classList.remove('show-button');

     changeStudentGrades();
 };

 const clearExamView = () => {
     // changing exam
     const parentNode = document.getElementById('exam-container').parentNode;
     parentNode.removeChild(document.getElementById('exam-container'));
     parentNode.insertAdjacentHTML('beforeend', `<div id="exam-container">
         <h1 id="exam-name"></h1>
         <div id="release-view"></div>
         <div id="exam-view">
             <div class="center"><select id="select-student" onchange="onStudentSelect(event)"></select><div id="save-button" onclick="onSave();">Save Changes</div></div>
             <div id="main-grade"></div>
             <div id="questions-view"></div>
         </div>
     </div>`);
 };

 const chooseExam = () => {
     trackedChanges = [];
     showLoading();
     document.getElementById(SIDEBAR_DIV).classList.add('sidebar-closed');
     document.getElementById(CONTAINER_DIV).classList.add('full-width');
     apiCall('getExamGrades.php', `&UCID=${ucid}&ExamID=${examID}`).then(JSON.parse).then((gradesObj) => {
         if (!gradesObj.success) {
             throw 'Error';
         }
         console.log(gradesObj);
         clearExamView();
         currentExam = gradesObj.StudentGrades;

         examName = examsLoaded[getExamIndex(examID)].displayName;
         takable = examsLoaded[getExamIndex(examID)].releasedForTaking === '1';
         gradesReleased = examsLoaded[getExamIndex(examID)].gradesReleased === '1';


         document.getElementById(EXAM_NAME_DIV).innerText = examName;

         const studentsList = currentExam.map(grade => `<option value="${grade.UCID}">${grade.UCID}</option>`).reduce((acc, val) => acc + val, '<option>Select a Student</option>');

         document.getElementById('select-student').insertAdjacentHTML('beforeend', studentsList);
         if (!document.getElementById('release-check')) {
             document.getElementById('release-view').insertAdjacentHTML('beforeend', '<label>Allow students to view their grades</label><input id="release-check" type="checkbox" onchange="releaseGrades()"></input>');
         }
         document.getElementById('release-check').checked = gradesReleased;
         doneLoading();
     })
         .catch((err) => {
             doneLoading();
             console.error(err);
             showMessage('Uh Oh! Something went wrong. Please try again later. ');
         });
 };

 const releaseGrades = () => {
     closeMessage();
     gradesReleased = !gradesReleased;
     const postString = `&ExamID=${examID}&ReleasedForTaking=${takable ? '1' : '0'}&GradesReleased=${gradesReleased ? '1' : '0'}`;
     apiCall('setExam.php', postString).then(JSON.parse).then((res) => {
         console.log(res);
         if (res.status) {
             showMessage(`Students ${gradesReleased ? 'can' : 'can\'t'} see their grades now.`);
         } else {
             showMessage('Sorry, something went wrong. Try again later');
         }
     });
 };

 const linkClick = (elem) => {
     examID = elem.dataset.examId;
     chooseExam();
 };


 const showView = (id) => {
     document.getElementById(id).classList.toggle('show');
 };

 const onSave = () => {
     if (questionGradeChanges.length === 0 && testCaseChanges.length === 0) {
         closeMessage();
         doneLoading();
         console.log('no changes');
         return;
     }
     closeMessage();
     showLoading();
     const sendingQuestionGradeChanges = questionGradeChanges.map((changedGrade) => {
         const postString = `&Column=${changedGrade.ColumnName}&ExamID=${changedGrade.ExamID}&UCID=${changedGrade.UCID}&QuestionID=${changedGrade.QuestionID}&NewGrade=${encodeURI(changedGrade.NewGrade)}`;
         return apiCall('updateGrade.php', postString);
     });

     const sendingTestCaseChanges = testCaseChanges.map((tc) => {
         const postString = `&Table=TestCasesGrades490&ExamID=${tc.ExamID}&UCID=${tc.UCID}&QuestionID=${tc.QuestionID}&TestCaseID=${tc.TestCaseID}&NewGrade=${encodeURI(tc.NewGrade)}`;
         return apiCall('updateGrade.php', postString);
     });

     Promise.all(sendingTestCaseChanges.concat(sendingQuestionGradeChanges)).then((res) => {
         const parsedResults = res.map(JSON.parse);
         const errorsFound = [];
         parsedResults.forEach((individualResult, index) => {
             if (!individualResult.status || !individualResult.success) {
                 errorsFound.push(index);
             }
         });
         if (errorsFound.length === 0) {
             showMessage('Your changes were submitted successfully');
             calculateNewGrade();
             questionGradeChanges = [];
             testCaseChanges = [];
             doneLoading();
         } else {
             showMessage('There was a problem submitting some of your changes. Please try again later.');
             doneLoading();
         }


         document.getElementById(SAVE_BUTTON_DIV).classList.remove('show-button');
     })
     .catch((err) => {
         console.error(err);
         doneLoading();
         showMessage('Uh Oh! There was a problem submitting your changes. Please try again later. ');
     });
 };

 ./js/landing-page.js
 ---
 let instructor = null;

 const startup = function (session) {
     instructor = session.Instructor;

     document.getElementById('greeting').innerText = `Welcome ${session.UCID}`;
 };

 ./js/login.js
 ---
 if (!(sessionStorage.length === 0 || sessionStorage.UCID === 'null' || sessionStorage.UCID === null || sessionStorage.UCID === 'undefined')) {
     window.location.href = 'html/landing-page.html';
 }
 function checkInputs() {
     const ucidErr = document.getElementById('ID-error');
     const passErr = document.getElementById('Password-error');
     let validInput = true;

     const idString = document.forms['login-form'].ID.value;
     const passString = document.forms['login-form'].Password.value;

     if (idString === '' || idString === null) {
         ucidErr.innerText = 'UCID cannot be blank';
         document.getElementById('ID').classList.add('err-input');
         validInput = false;
     }

     if (passString === '' || passString === null) {
         passErr.innerText = 'Password cannot be blank';
         document.getElementById('Password').classList.add('err-input');
         validInput = false;
     }
     return validInput;
 }

 const showMessage = (message) => {
     document.getElementById('message-view').innerText = message;
     document.getElementById('message-view').classList.remove('closed');
 };
 const closeMessage = () => {
     document.getElementById('message-view').classList.add('closed');
 };

 function onTextChange(event) {
     const targetId = `${event.target.id}-error`;
     document.getElementById(event.target.id).classList.remove('err-input');
     document.getElementById(targetId).innerText = '';
 }


 function changePage(results) {
     if (results.BackendSuccess === true) {
         window.location.href = 'html/landing-page.html';
     } else {
         showMessage('Sorry, your username and password were not recognized. Please try again.');
     }
 }

 function onSubmit(event) {
     event.preventDefault();
     if (!checkInputs()) {
         return;
     }
     closeMessage();
     const url = 'http://afsaccess1.njit.edu/~ajr42/490Project/php/login.php';
     const postString = `ID=${document.getElementById('ID').value}&Password=${document.getElementById('Password').value}`;
     const xhr = new XMLHttpRequest();
     xhr.open('POST', url, true);
     xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
     xhr.send(postString);
     xhr.onreadystatechange = function () {
         if (xhr.readyState === 4) {
             if (xhr.status === 200) {
                 const resp = xhr.responseText;
                 const respJson = JSON.parse(resp);
                 sessionStorage.UCID = respJson.ucid;
                 sessionStorage.Instructor = respJson.type;
                 changePage(respJson);
             }
         }
     };
 }

 const showSection = () => {
     document.getElementById('about-section').classList.add('reveal');
 };

 const hideSection = () => {
     document.getElementById('about-section').classList.remove('reveal');
 };

 ./js/select-questions.js
 ---
 accessAllowed('i', sessionStorage.Instructor);

 let questionsLoaded = null;
 let questionsInBank = [];
 let difficultySelected = 'All';
 let typeSelected = 'Type';
 const questionsSelected = [];
 const examSelected = 1;
 let maxGrade = 0;
 let ucid = null;
 const difficultyOptions = [{ val: 'All', label: 'Difficulty' }, { val: '1', label: 'Easy' }, { val: '2', label: 'Medium' }, { val: '3', label: 'Hard' }];
 const typeOptions = ['Type', 'None', 'For', 'While', 'Recursion', 'Overload'];


 const QUESTION_BANK_DIV = 'question-bank-view';
 const QUESTION_POOL_DIV = 'questions-selected-view';

 const getQuestionIndex = (id) => {
     for (let i = questionsLoaded.length - 1; i >= 0; i -= 1) {
         if (questionsLoaded[i].id === id) {
             return i;
         }
     }
     return -1;
 };

 const clearQuestionsBank = () => {
     const questionBank = document.getElementById(QUESTION_BANK_DIV);
     const deleteList = document.getElementsByClassName('question-in-bank');
     for (let i = deleteList.length - 1; i >= 0; i -= 1) {
         questionBank.removeChild(deleteList[i]);
     }
 };

 const updateMaxGrade = () => {
     let newCount = 0;
     questionsSelected.forEach((qId) => {
         const div = document.getElementById(qId);
         newCount += parseInt(div.childNodes[1].value, 10);
     });
     maxGrade = newCount;
     document.getElementById('max-grade').innerText = `Maximum Grade: ${maxGrade}`;
 };

 const addToPool = (id) => {
     if (questionsSelected.includes(id) || getQuestionIndex(id) === -1) {
         return;
     }
     const questionPool = document.getElementById(QUESTION_POOL_DIV);
     questionsSelected.push(id);
     const questionText = questionsLoaded[getQuestionIndex(id)].QuestionString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
     const newDiv = `<div class="wrapper" id="${id}"><div class="question-in-pool"  data-q-id="${id}" onclick="questionPoolClick(this);">${questionText}</div><input class="small-input" type="number" placeholder="value"  min="1" onchange="gradeValChange(event)"></input></div>`;
     questionPool.insertAdjacentHTML('beforeend', newDiv);
     document.getElementById(`${id}`).childNodes[1].defaultValue = '1';
     updateMaxGrade();
 };

 const questionBankClick = (elem) => {
     const removeIndex = questionsInBank.indexOf(elem.dataset.qId);
     questionsInBank.splice(removeIndex, 1);
     document.getElementById(elem.dataset.qId).parentNode
     .removeChild(document.getElementById(elem.dataset.qId));

     addToPool(elem.dataset.qId);
 };

 const gradeValChange = (e) => {
     updateMaxGrade();
     removeValidation(e);
 };


 const addToBank = function (id) {
     if (questionsInBank.includes(id) || getQuestionIndex(id) === -1) {
         return;
     }
     const questionBank = document.getElementById(QUESTION_BANK_DIV);
     questionsInBank.push(id);
     const questionText = questionsLoaded[getQuestionIndex(id)].QuestionString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
     const newDiv = `<div class="question question-in-bank" id="${id}" data-q-id="${id}" onclick="questionBankClick(this);">${questionText}</div>`;
     questionBank.insertAdjacentHTML('beforeend', newDiv);
 };

 const addQuestionsToBank = function () {
     clearQuestionsBank();
     const questionBank = document.getElementById(QUESTION_BANK_DIV);

     questionsInBank.forEach((id) => {
         if (questionsSelected.includes(id)) {
             return;
         }
         const questionText = questionsLoaded[getQuestionIndex(id)].QuestionString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
         const newDiv = `<div class="question question-in-bank" id="${id}" data-q-id="${id}" onclick="questionBankClick(this);">${questionText}</div>`;
         questionBank.insertAdjacentHTML('beforeend', newDiv);
     });

     doneLoading();
 };

 const questionPoolClick = (elem) => {
     const removeIndex = questionsSelected.indexOf(elem.dataset.qId);
     questionsSelected.splice(removeIndex, 1);
     document.getElementById(elem.dataset.qId).parentNode
     .removeChild(document.getElementById(elem.dataset.qId));

     addToBank(elem.dataset.qId);
 };

 const onSelect = () => {
     showLoading(document.getElementById(QUESTION_BANK_DIV));
     const difficulty = difficultySelected === 'All' ? '' : `${difficultySelected}`;
     const type = typeSelected === 'Type' ? '' : `${typeSelected}`;
     const postString = `Difficulty=${difficulty}&Type=${type}`;
     apiCall('getQuestions.php', postString).then(JSON.parse).then((questions) => {
         if (questions.Questions === null) {
             if (difficultySelected === 'All' && typeSelected !== 'Type') {
                 showMessage(`Sorry, there are no ${typeSelected} questions.`);
             } else if (difficultySelected !== 'All' && typeSelected === 'Type') {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10)].label} questions.`);
             } else {
                 showMessage(`Sorry, there are no ${difficultyOptions[parseInt(difficultySelected, 10)].label} ${typeSelected} questions.`);
             }
             doneLoading();
             return;
         }
         closeMessage();
         questionsLoaded = questions.Questions;
         questionsInBank = questionsLoaded.map(q => q.id);

         addQuestionsToBank();
     });
 };

 const onDifficultySelect = (event) => {
     difficultySelected = event.target.value;
     onSelect();
 };

 const onTypeSelect = (event) => {
     typeSelected = event.target.value;
     onSelect();
 };

 const validation = () => {
     let accepted = true;
     if (questionsSelected.length === 0) {
         accepted = false;
     }

     const examName = document.getElementById('exam-name');

     if (examName.value === '') {
         examName.classList.add('reject');
         accepted = false;
     }

     questionsSelected.forEach((qId) => {
         const div = document.getElementById(qId);
         if (div.childNodes[1].value === '') {
             div.childNodes[1].classList.add('reject');
             accepted = false;
         }
     });

     return accepted;
 };

 const onSubmit = () => {
     if (!validation()) {
         return;
     }
     let url = 'createExam.php';
     const postString = `&UCID=instructor&ExamName=${document.getElementById('exam-name').value}&MaxGrade=${maxGrade}`;

     apiCall(url, postString).then(JSON.parse).then((examResult) => {
         url = 'addToExam.php';
         const sendQuestions = questionsSelected.map((qid, index) => {
             const qVal = document.getElementById(qid).childNodes[1].value;
             return apiCall(url, `&ExamID=${examResult.ExamID}&QuestionID=${qid}&QuestionValue=${qVal}&NumberInExam=${index + 1}`);
         });
         Promise.all(sendQuestions).then((res) => {
             let numberOfSuccess = 0;
             res.forEach((individualQuestion) => {
                 const parsedIndividualQuestion = JSON.parse(individualQuestion);
                 if (parsedIndividualQuestion.success) {
                     numberOfSuccess += 1;
                 }
             });

             if (numberOfSuccess === res.length) {
                 showMessage('The exam was created successfully');
             } else {
                 showMessage('Sorry, something went wrong. Please try again later.');
             }
             window.scrollTo(0, 0);
         });
     });
 };


 const startup = (session) => {
     showLoading(document.getElementById(QUESTION_BANK_DIV));
     ucid = session.UCID;
     apiCall('getQuestions.php').then(JSON.parse).then((questions) => {
         questionsLoaded = questions.Questions;
         questionsInBank = questionsLoaded.map(q => q.id);

         addQuestionsToBank();
         makeDifficultyFilterOptions();
         makeTypeFilterOptions();
     });
 };

 ./js/shared.js
 ---
 let session = {};

 const apiCall = (endpoint, postString) => new Promise((resolve, reject) => {
     const xhr = new XMLHttpRequest();
     let appendedPostString = postString;
     const url = 'http://afsaccess1.njit.edu/~ajr42/490Project/php/apiCall.php';

     xhr.open('POST', url, true);
     xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
     if (postString === undefined) {
         appendedPostString = `&Dir=${endpoint}`;
     } else {
         appendedPostString += `&Dir=${endpoint}`;
     }
     xhr.send(appendedPostString);
     xhr.onreadystatechange = function change() {
         if (xhr.readyState === 4) {
             if (xhr.status === 200) {
                 const resp = xhr.responseText;
                 resolve(resp);
             } else {
                 reject(xhr.status);
             }
         }
     };
 });

 const accessAllowed = (whoIsAllowed, sessionVar) => {
     if (whoIsAllowed === 'i') {
         if (!session.Instructor) {
             window.location.replace('../html/landing-page.html');
             return false;
         }
     } else if (session.Instructor) {
         window.location.replace('../html/landing-page.html');
         return false;
     }
     return true;
 };

 const localCall = (url, postString) => new Promise((resolve, reject) => {
     const xhr = new XMLHttpRequest();
     xhr.open('POST', url, true);
     xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
     if (postString === undefined) {
         xhr.send();
     } else {
         xhr.send(postString);
     }
     xhr.onreadystatechange = function () {
         if (xhr.readyState === 4) {
             if (xhr.status === 200) {
                 const resp = xhr.responseText;
                 resolve(JSON.parse(resp));
             } else {
                 reject(xhr.status);
             }
         }
     };
 });


 const sessionFetch = () => new Promise((resolve, reject) => {
     if (sessionStorage.length === 0 || sessionStorage.UCID === 'null' || sessionStorage.UCID === null || sessionStorage.UCID === 'undefined') {
         reject(sessionStorage);
     } else {
         const sessionCompatability = {
             UCID: sessionStorage.UCID,
             Instructor: sessionStorage.Instructor === 'i',
         };
         resolve(sessionCompatability);
     }
 });

 const goHome = function () {
     location.href = 'landing-page.html';
 };


 const removeValidation = (e) => {
     if (e.target.classList.contains('reject')) {
         e.target.classList.remove('reject');
     }
 };

 const logout = () => {
     sessionStorage.UCID = null;
     sessionStorage.Instructor = null;
     apiCall('../php/logout.php').then(() => {
         window.location.href = '../login.html';
     });
 };

 const showLoading = (target) => {
     const loadingDiv = `<div id="loading-screen">
         <div id="loading-icon">
             <svg width='100px' height='100px' xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" class="uil-ring-alt"><rect x="0" y="0" width="100" height="100" fill="none" class="bk"></rect><circle cx="50" cy="50" r="40" stroke="#afafb7" fill="none" stroke-width="10" stroke-linecap="round"></circle><circle cx="50" cy="50" r="40" stroke="#5cffd6" fill="none" stroke-width="6" stroke-linecap="round"><animate attributeName="stroke-dashoffset" dur="2s" repeatCount="indefinite" from="0" to="502"></animate><animate attributeName="stroke-dasharray" dur="2s" repeatCount="indefinite" values="150.6 100.4;1 250;150.6 100.4"></animate></circle></svg>
     </div>`;
     let attachingNode = document.body;
     if (target !== undefined) {
         attachingNode = target;
     }

     if (document.getElementById('loading-screen')) {
         return;
     }

     attachingNode.insertAdjacentHTML('afterbegin', loadingDiv);
     setTimeout(() => {
         document.getElementById('loading-screen').classList.add('finish-load');
     }, 3);
 };

 const doneLoading = () => {
     if (!document.getElementById('loading-screen')) {
         return;
     }

     const removingNode = document.getElementById('loading-screen').parentNode;

     document.getElementById('loading-screen').classList.remove('finish-load');
     setTimeout(() => {
         removingNode.removeChild(document.getElementById('loading-screen'));
     }, 510);
 };


 const addInstructorView = () => {
     const sidebar = document.getElementById('logo');
     const divVar = '<div id="instructor-view"><a href="add-question.html">Add a Question</a><a href="add-test-case.html">Add Test Cases</a><a href="select-questions.html">Make an Exam</a><a href="exam-info.html">Exam Info</a><a href="grade-results.html">Grading Results</a></div>';
     sidebar.insertAdjacentHTML('afterend', divVar);
 };

 const addStudentView = () => {
     const sidebar = document.getElementById('logo');
     const divVar = '<div id="student-view"><a class ="sidebar-element" href="take-exam.html">Take an Exam</a><a href="view-grades.html">View Grades</a></div>';
     sidebar.insertAdjacentHTML('afterend', divVar);
 };

 const closeMessage = () => {
     document.getElementById('message-view').classList.add('closed');
 };

 const showMessage = (message, url) => {
     if (url !== undefined) {
         document.getElementById('message-view').onclick = (route) => {
             window.location.href = route;
         };
     }
     document.getElementById('message-view').innerHTML = message;
     document.getElementById('message-view').classList.remove('closed');
     setTimeout(closeMessage, 10000);
 };


 const makeDifficultyFilterOptions = () => {
     const difficultyDropdown = document.getElementById('select-difficulty');
     let divString = '';
     [{ val: 'All', label: 'Difficulty' },
      { val: 1, label: 'Easy' },
       { val: 2, label: 'Medium' },
       { val: 3, label: 'Hard' },
     ].forEach((type) => {
         divString += `<option value=${type.val}>${type.label}</option>`;
     });
     difficultyDropdown.insertAdjacentHTML('beforeend', divString);
 };

 const makeTypeFilterOptions = () => {
     const typeDropdown = document.getElementById('select-type');
     let divString = '';
     ['Type', 'None', 'For', 'While', 'Recursion', 'Overload'].forEach((type) => {
         divString += `<option value=${type}>${type}</option>`;
     });
     typeDropdown.insertAdjacentHTML('beforeend', divString);
 };


 // ///////////////////////////////////////////////////////
 // ///////////////////////////////////////////////////////
 // ///////////////////////////////////

 sessionFetch().then((res) => {
     session = res;
 }).catch((res) => {
     window.location.replace('../login.html');
 });

 window.onload = () => {
     if (session.Instructor) {
         addInstructorView();
     } else {
         addStudentView();
     }


     startup(session);
 };

 ./js/take-exam.js
 ---
 accessAllowed('s', sessionStorage.Instructor);

 let questionsLoaded = null;
 let currentQuestion = 0;
 let questionCount = null;
 let examID = null;
 let examStarted = false;
 let examName = null;
 let ucid = null;

 // used for modal view
 let tempExamID = null;
 let tempExamName = null;

 const SIDEBAR_DIV = 'sidebar';
 const CONTAINER_DIV = 'other-half';

 const startup = (session) => {
     showLoading(document.getElementById(SIDEBAR_DIV));
     ucid = session.UCID;
     apiCall('getExams.php', `&UCID=${session.UCID}`).then(JSON.parse).then((result) => {
         if ((result.Exams === undefined || result.Exams === null
           || result.Exams.length === 0) && result.success) {
             showMessage('There are no exams yet :(');
             doneLoading();

             return;
         }

         examsLoaded = result.Exams;
         const examsList = result.Exams.map(exam => `<div data-exam-id=${exam.id} data-exam-name=${exam.displayName} onclick="linkClick(this)" class="sidebar-element">${exam.displayName}</div>`).reduce((acc, val) => acc + val, '');

         document.getElementById(SIDEBAR_DIV).insertAdjacentHTML('beforeend', examsList);
         doneLoading();
     });
 };

 const clearQuestionView = () => {
     const parentNode = document.getElementById(CONTAINER_DIV).parentNode;
     parentNode.removeChild(document.getElementById(CONTAINER_DIV));
     parentNode.insertAdjacentHTML('beforeend', '<div id="other-half"></div>');
 };


 const changeButtons = () => {
     document.getElementById(CONTAINER_DIV).removeChild(document.getElementById('button-section'));
     if (questionsLoaded.length === 1) {
         document.getElementById(CONTAINER_DIV).insertAdjacentHTML('beforeend', '<div id="button-section"><button id ="next" onclick="onSubmit()">Submit</button><button id ="previous" onclick="previousClick()">Previous</button></div>');
     } else {
         document.getElementById(CONTAINER_DIV).insertAdjacentHTML('beforeend', '<div id="button-section"><button id ="next" onclick="nextClick()">Next</button><button id ="previous" onclick="previousClick()">Previous</button></div>');
     }
 };

 const changeQuestionHeader = (question) => {
     document.getElementById('question-header').innerText = `Question ${currentQuestion + 1} of ${questionCount} (${question.value} ${question.value === '1' ? 'pt.' : 'pts.'})`;
 };

 const countTabs = (substr) => {
     let count = 0;

     let startScanning = false;
     let i = substr.length - 1;
     while (i > 0) {
         if (substr.charAt(i) === '\t') {
             startScanning = true;
             count += 1;
         } else if (substr.charAt(i) === '\n') {
             break;
         } else if (startScanning) {
             break;
         }
         i -= 1;
     }

     return count;
 };

 const repeatTab = (count) => {
     let returnStr = '';
     for (let j = 0; j < count; j += 1) {
         returnStr += '\t';
     }
     return returnStr;
 };


 const addTab = (e) => {
     const s = e.target.selectionStart;

     if (e.keyCode === 9) {
         e.preventDefault();
         e.target.value = `${e.target.value.substring(0, s)}\t${e.target.value.substring(e.target.selectionEnd)}`;
         e.target.selectionEnd = s + 1;
     } else if (e.keyCode === 13) {
         e.preventDefault();

         const addingThisManyTabs = countTabs(e.target.value.substring(0, s));
         if (e.target.value.charAt(s - 1) === '{') {
             e.target.value = `${e.target.value.substring(0, s)}\n${repeatTab(addingThisManyTabs + 1)}\n${repeatTab(addingThisManyTabs)}${e.target.value.substring(s)}`;
             e.target.selectionEnd = s + countTabs(e.target.value.substring(0, s)) + 2;
         } else {
             e.target.value = `${e.target.value.substring(0, s)}\n${repeatTab(addingThisManyTabs)}${e.target.value.substring(e.target.selectionEnd)}`;
             e.target.selectionEnd = s + countTabs(e.target.value.substring(0, s)) + 1;
         }
     }
 };

 const addClosing = (e) => {
     let s = null;
     if (e.keyCode === 40) {
         e.preventDefault();
         s = e.target.selectionStart;
         e.target.value = `${e.target.value.substring(0, s)}()${e.target.value.substring(e.target.selectionEnd)}`;
         e.target.selectionEnd = s + 1;
     } else if (e.keyCode === 123) {
         e.preventDefault();
         s = e.target.selectionStart;
         e.target.value = `${e.target.value.substring(0, s)}{}${e.target.value.substring(e.target.selectionEnd)}`;
         e.target.selectionEnd = s + 1;
     } else if (e.keyCode === 91) {
         e.preventDefault();
         s = e.target.selectionStart;
         e.target.value = `${e.target.value.substring(0, s)}[]${e.target.value.substring(e.target.selectionEnd)}`;
         e.target.selectionEnd = s + 1;
     } else if (e.keyCode === 34) {
         e.preventDefault();
         s = e.target.selectionStart;
         if (e.target.selectionStart !== e.target.selectionEnd) {
             e.target.value = `${e.target.value.substring(0, e.target.selectionStart - 1)}"${e.target.value.substring(e.target.selectionStart, e.target.selectionEnd)}"${e.target.value.substring(e.target.selectionEnd + 1)}`;
         } else {
             e.target.value = `${e.target.value.substring(0, s)}""${e.target.value.substring(e.target.selectionEnd)}`;
             e.target.selectionEnd = s + 1;
         }
     } else if (e.keyCode === 39) {
         e.preventDefault();
         s = e.target.selectionStart;
         if (e.target.selectionStart !== e.target.selectionEnd) {
             e.target.value = `${e.target.value.substring(0, e.target.selectionStart - 1)}'${e.target.value.substring(e.target.selectionStart, e.target.selectionEnd)}'${e.target.value.substring(e.target.selectionEnd + 1)}`;
         } else {
             e.target.value = `${e.target.value.substring(0, e.target.selectionStart)}''${e.target.value.substring(e.target.selectionEnd)}`;
             e.target.selectionEnd = s + 1;
         }
     }
 };
 const onTextChange = (e) => {
     questionsLoaded[currentQuestion].answer = e.target.value;
 };

 const changeQuestionView = () => {
     const questionText = document.getElementById('question-text');
     const answerText = document.getElementById('question-answer');

     questionText.innerText = questionsLoaded[currentQuestion].text;
     answerText.value = questionsLoaded[currentQuestion].answer;
     changeQuestionHeader(questionsLoaded[currentQuestion]);
 };

 const validation = () => {
     let accept = true;
     const invalid = [];
     questionsLoaded.forEach((qu, index) => {
         if (qu.answer === '') {
             qu.className = 'reject';
             invalid.push(index + 1);
             accept = false;
         }
     });

     if (!accept) {
         const errString = `You missed some questions: ${invalid.join()}`;
         showMessage(errString);
     }

     return accept;
 };

 const onSubmit = () => {
     if (!validation()) {
         document.getElementById('next').classList.add('disabled');
         return;
     }
     document.getElementById('next').classList.remove('disabled');


     showLoading(document.getElementById('question-view'));
     const submission = questionsLoaded.map((qu) => {
         const postString = `&ExamID=${examID}&QuestionID=${qu.id}&UCID=${ucid}&UserTextBox=${encodeURIComponent(qu.answer)}`;
         return apiCall('submitAnswer.php', postString);
         console.log(postString);
     });

     Promise.all(submission).then((res) => {
         doneLoading();
         console.log(res);
         parsedResults = res.map(JSON.parse);
         let success = true;
         parsedResults.forEach((individualResult) => {
             if (!individualResult.success) {
                 success = false;
             }
         });

         if (success) {
             window.location.href = './grade-results.html';
         } else {
             showMessage('Oops, there was a problem submitting your answers. Try again later.');
         }
     });
 };

 const nextClick = () => {
     if (currentQuestion === questionsLoaded.length - 2) {
         currentQuestion += 1;
         changeQuestionView();
         document.getElementById('next').innerText = 'Submit';
         document.getElementById('next').onclick = onSubmit;
     }

     if (currentQuestion < questionsLoaded.length - 2) {
         currentQuestion += 1;
         changeQuestionView();
     }


     if (currentQuestion === 1) {
         document.getElementById('previous').classList.remove('disabled');
     }
 };

 const previousClick = () => {
     if (currentQuestion > 0) {
         currentQuestion -= 1;
         changeQuestionView();
     }

     if (currentQuestion === 0) {
         document.getElementById('previous').classList.add('disabled');
     }
     if (currentQuestion === questionsLoaded.length - 2) {
         document.getElementById('next').innerText = 'Next';
         document.getElementById('next').onclick = nextClick;
         document.getElementById('next').classList.remove('disabled');
     }
 };

 const openModal = (message) => {
     const modalDiv = `
   <div id="modal">
     <div id="modal-content">
       <div id="modal-text">
         <p>${message}</p>
       </div>
       <div id="modal-footer">
         <div id="button-group">
             <div id="cancel-button" onclick="modalChoice(false);">Cancel</div>
             <div id="confirm-button" onclick="modalChoice(true);">Confirm</div>
         </div>
       </div>
     </div>
   </div>`;

     document.getElementById('message-view').insertAdjacentHTML('afterend', modalDiv);
 };

 const closeModal = () => {
     document.getElementById('modal').parentNode.removeChild(document.getElementById('modal'));
 };

 const chooseExam = () => {
     clearQuestionView();
     showLoading();
     document.getElementById(SIDEBAR_DIV).classList.add('sidebar-closed');
     document.getElementById(CONTAINER_DIV).classList.add('full-width');
     apiCall('getExam.php', `&ExamID=${examID}`).then(JSON.parse).then((exam) => {
         if (!exam.success) {
             return;
         }

         if (exam.Questions === null && exam.success) {
             return;
         }
         questionsLoaded = exam.Questions.map(question => ({
             text: question.QuestionString,
             id: question.id,
             value: question.QuestionValue,
             answer: '',
             className: '',
         }));
         questionCount = questionsLoaded.length;
         currentQuestion = 0;
         // document.getElementById('exam-name').innerText = examName;


         if (!document.getElementById('question-header')) {
             const examView = `<div id="question-view">
                             <h3 id="question-header"></h3>
                             <div id="question-text"></div>
                                 <textarea id="question-answer" onkeydown="addTab(event)" onkeypress="addClosing(event)" onchange="onTextChange(event)"></textarea>
                             </div>
                             <div id="button-section">
                               <button id ="next" onclick="nextClick()">Next</button>
                               <button id ="previous" onclick="previousClick()">Previous</button>
                             </div>`;
             document.getElementById(CONTAINER_DIV).insertAdjacentHTML('beforeend', examView);
         }
         changeQuestionView();
         changeButtons();
         closeMessage();
         doneLoading();
     });
 };

 const modalChoice = (val) => {
     if (val) {
         examID = tempExamID;
         examName = tempExamName;
         chooseExam();
     }
     tempExamID = null;
     tempExamName = null;
     closeModal();
 };

 const linkClick = (elem) => {
     if (examStarted) {
         if (elem.dataset.examId === examID) {
             // return;
         }
         tempExamID = elem.dataset.examId;
         tempExamName = elem.dataset.examName;
         openModal('If you switch exams, your answers will be lost. Are you sure you want to continue?');
     } else {
         examID = elem.dataset.examId;
         examName = elem.dataset.examName;
         chooseExam();
         examStarted = true;
     }
 };

 ./js/view-grades.js
 ---
 accessAllowed('s', sessionStorage.Instructor);

 let ucid = null;
 let examID = null;

 const QUESTIONS_VIEW_DIV = 'questions-view';
 const EXAM_NAME_DIV = 'exam-name';
 const MAIN_GRADE_DIV = 'main-grade';
 const SIDEBAR_DIV = 'sidebar';
 const CONTAINER_DIV = 'other-half';

 const startup = (session) => {
     ucid = session.UCID;
     showLoading(document.getElementById(SIDEBAR_DIV));
     apiCall('getGradedExams.php', `&UCID=${session.UCID}`).then(JSON.parse).then((result) => {
         if ((result['Graded Exams'] === undefined || result['Graded Exams'] === null || result['Graded Exams'].length === 0) && result.success) {
             showMessage('There are no grades yet :(');
             doneLoading();
             return;
         }

         examsLoaded = result['Graded Exams'];
         if (!result['Graded Exams']) {
             showMessage('There are no grades :(');
             return;
         }
         const examsList = result['Graded Exams'].map(exam => `<div data-exam-id=${exam.ExamID} onclick="linkClick(this)" class="sidebar-element">${exam.ExamName}</div>`).reduce((acc, val) => acc + val, '');

         document.getElementById(SIDEBAR_DIV).insertAdjacentHTML('beforeend', examsList);
         doneLoading();
     });
 };

 const showView = (id) => {
     document.getElementById(id).classList.toggle('show');
 };


 const getExamIndex = (id) => {
     for (let i = examsLoaded.length - 1; i >= 0; i -= 1) {
         if (examsLoaded[i].ExamID === id) {
             return i;
         }
     }
     return -1;
 };

 const clearQuestionsView = () => {
     document.getElementById(MAIN_GRADE_DIV).innerText = '';
     const deletingNode = document.getElementById(QUESTIONS_VIEW_DIV);
     if (deletingNode) {
         const parentNode = document.getElementById('exam-view');
         parentNode.removeChild(deletingNode);
         parentNode.insertAdjacentHTML('beforeend', '<div id="questions-view"></div>');
     }
 };

 const chooseExam = () => {
     clearQuestionsView();

     document.getElementById(SIDEBAR_DIV).classList.add('sidebar-closed');
     document.getElementById(CONTAINER_DIV).classList.add('full-width');
     const questionsView = document.getElementById(QUESTIONS_VIEW_DIV);
     apiCall('getExamGrades.php', `&UCID=${ucid}&ExamID=${examID}`).then(JSON.parse).then((gradesObj) => {
         console.log(gradesObj);
         if (gradesObj.Questions === undefined && gradesObj.success) {
             return;
         }


         gradesObj.Questions.sort((a, b) => a.NumberInExam > b.NumberInExam).forEach((qu) => {
             const testCases = qu.TestCases.map(testCase => `<tr>
                           <td>${testCase.Input}</td><td>${testCase.ExpectedOutput}</td><td>${testCase.Result}</td><td class="${testCase.Passed === '1' ? 'color-pass' : 'color-fail'}">${testCase.Passed === '1' ? 'Yes' : 'No'}</td><td>${parseFloat(testCase.TestCaseGrade).toFixed(2).replace('.00', '')}/${testCase['Max Test Case Grade'].toFixed(2).replace('.00', '')}</td>
                         </tr>`).reduce((acc, val) => acc + val, '');
             const compileResultsSection = qu.compilationMessage !== '' ?
             `<div class="show-result" onclick="showView('Q${qu.QuestionID}-Compile');">Compilation Results</div>
             <div class="hidden compile-result" id="Q${qu.QuestionID}-Compile"></div>` : '';

             const divString = `
             <div class="question-block">
               <div class="question-header">Question ${qu.NumberInExam} (${qu.Grade}/${qu['Max Value']} pts.)</div>
               <div class="question-string" id="Q${qu.QuestionID}-String"></div>
               <div class="show-result-header">Your Answer</div>
               <div class="question-user-input" id="Q${qu.QuestionID}-UserInput"></div>
               ${compileResultsSection}
               <div class="feedback">${qu.userFeedback !== '' ? `Feedback: ${qu.userFeedback}` : ''}</div>
               <div id="Q${qu.QuestionID}TestCases">
                       <table>
                         <tr>
                           <td class="left-align">Correct Method Name</td><td></td><td></td><td class="${qu.correctMethodName === '1' ? 'color-pass' : 'color-fail'}">${qu.correctMethodName === '1' ? 'Yes' : 'No'}</td><td>${parseFloat(qu.methodGrade).toFixed(2).replace('.00', '')}/${parseFloat(qu['Max Method Name Grade']).toFixed(2).replace('.00', '')}</td>
                         </tr>
                         <tr>
                           <td class="left-align">Compiled Correctly</td><td></td><td></td><td class="${qu.compiledCorrectly === '1' ? 'color-pass' : 'color-fail'}">${qu.compiledCorrectly === '1' ? 'Yes' : 'No'}</td><td>${parseFloat(qu.compiledGrade).toFixed(2).replace('.00', '')}/${parseFloat(qu['Max Compiled Grade']).toFixed(2).replace('.00', '')}</td>
                         </tr>
                         <tr>
                           <td class="left-align">Correct Structure</td><td></td><td></td><td class="${qu.correctStructure === '1' ? 'color-pass' : 'color-fail'}">${qu.correctStructure === '1' ? 'Yes' : 'No'}</td><td>${parseFloat(qu.structGrade).toFixed(2).replace('.00', '')}/${parseFloat(qu['Max Struct Grade']).toFixed(2).replace('.00', '')}</td>
                         </tr>
                       <tr class="table-header">
                           <th>Input</th><th>Expected Output</th><th>Actual Output</th><th>Passed</th><th>Points</th>
                       </tr>
                       <tbody>
                           ${testCases}
                       </tbody>
                       </table>
               </div>
             </div>`;
             questionsView.insertAdjacentHTML('beforeend', divString);

             document.getElementById(`Q${qu.QuestionID}-String`).innerText = qu.QuestionString;
             document.getElementById(`Q${qu.QuestionID}-UserInput`).innerText = qu.UserInput.replace(/(?:\t)/g, '      ');
             if (qu.compilationMessage !== '') {
                 document.getElementById(`Q${qu.QuestionID}-Compile`).innerText = qu.compilationMessage;
             }
         });
         document.getElementById(MAIN_GRADE_DIV).innerText = `${gradesObj.Grade.toFixed(2).replace('.00', '')}/${gradesObj['Max Grade']}`;
         doneLoading();
     })
         .catch((err) => {
             doneLoading();
             console.error(err);
             showMessage('Uh Oh! Something went wrong. Please try again later. ');
         });
 };

 const linkClick = (elem) => {
     if (elem.dataset.examId === examID) {
         return;
     }
     examID = elem.dataset.examId;
     showLoading();
     chooseExam();
 };
